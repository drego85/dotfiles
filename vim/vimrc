" vim:foldmethod=marker
" 
" My own VIM configuration.
"
" Copyright (c) 2019 Emanuele Petriglia (ema-pe) <inbox@emanuelepetriglia.com>.
" All rights reserved. This script is licensed under the MIT license.

" UI settings. {{{

" It enable line numeration.
set number

" It enables relative number.
set relativenumber

" It shows information abount row and column.
set ruler

" It allows to recognize file types.
filetype plugin on
filetype on

" It shows control line.
set laststatus=2

" It shows a box with autocompletion for commands.
set wildmenu

" It automatically reads the file if it's changed outside VIM.
set autoread

" Highlight these characters when the curson is over "{[()]}".
set showmatch

" }}}

" Searching settings {{{

" It starts searching as of typing.
set incsearch

" Hightlight matches.
set hlsearch

" Include all subdirectories when searching file (for example with "find
" <name>")
set path+=**

" Clear hightlighted text.
nnoremap \q :nohlsearch<CR>

" }}}

" Tag jumping {{{

" Create "tags" file (ctags required).
command! MakeTags !ctags -R .

" Now I can:
" - Use ^] to jump to tag under cursor
" - Use g] to resolve ambigous tags
" - Use ^t to jump back up the tag stack

" }}}

" Folding settings {{{

" Enable folding.
set foldenable

" Folding the code according to the indentation.
set foldmethod=indent

" Start folding from the high level.
set foldlevel=0

" Fold only two levels.
set foldnestmax=2

" 'za' -> toggle (open or close) the folder at the cursor. I've add a custom
" keybinding.
nnoremap <space> za

" }}}

" Syntaxt settings {{{

syntax on

" Set 256 color mode.
set t_Co=256

" Set background color.
set background=dark

set termguicolors

" Set color scheme.
colorscheme PaperColor

" It highlights initial and final spaces and tabs.
set list lcs=trail:‧,tab:→→

" }}}

" Line lenght settings {{{

" It enable the right margin indicator.
set cc=81
" It sets the color of right margin indicator.
highlight ColorColumn ctermbg=red

" }}}

" Indentation settings {{{

" Wrap lines longer than 80 characters.
set textwidth=80

" Tabs are spaces.
set expandtab

" Allows to insert tab with 'Shift+Tab'.
inoremap <S-Tab> <C-V><Tab>

" Default indent options:
" - tabstop (or ts) is the number of spaces that a <Tab> is made of;
" - shiftwidth (or sw) is the number of spaces to use when indenting.
" I use these settings to work with Python.
set tabstop=4
set shiftwidth=4

" Automatic indentation.
set autoindent
filetype plugin indent on

augroup SpecificIndentations
    " For Makefile files, don't convert tabs into spaces.
    autocmd Filetype Makefile setlocal noexpandtab

    " For C files (also header file), use 8 spaces (Linux style) instead of 4.
    autocmd Filetype c setlocal ts=8 sw=8
    autocmd Filetype cpp setlocal ts=8 sw=8

    " For sh (bash) use only 2 spaces.
    autocmd Filetype sh setlocal ts=2 sw=2

    " For HTML files, I prefere to keep long lines.
    autocmd Filetype html setlocal textwidth=0
augroup END

" }}}

" Netrw settings {{{

" Set the "tree" view (like "tree" command).
let g:netrw_liststyle = 3

" Remove the banner.
let g:netrw_banner = 0

" Open selected files to the previous window.
let g:netrw_browse_split = 4

" Set the width of the window (percent value).
let g:netrw_winsize = 20

" Open the window at right.
let g:netrw_altv = 1

" }}}

" Autocompletion {{{
"
" Most used commands:
"
"   - ^x^n for JUST this file;
"   - ^x^f for filenames;
"   - ^x^] for tags only;
"   - ^n for anything specified by the 'complete' option;
"
" Note: use ^n and ^p to go back and forth in the suggestion list.
" }}}

" Other settings and custom functions {{{

" Allow to move up and down by a single row on the screen, and not linewise
" basis.
nnoremap j gj
nnoremap k gk

" Allow VIM to read settings from the file.
set modelines=1

" Toggle between number and relativenumber...
function! ToggleNumber()
    if(&relativenumber == 1)
        set norelativenumber
        set number
    else
        set relativenumber
    endif
endfunc

" .. and bind it to a custom keybinding.
nnoremap <Tab> :call ToggleNumber()<CR>

" Load 'redact_pass', a 'pass' plugin to improve secutiry when editing a
" password using VIM.
try
    source /usr/share/doc/pass/vim/redact_pass.vim
catch
    " Ignore it , 'pass' may be not installed.
endtry

" }}}

" vim-asciidoc plugin's settings {{{
"
" I use vim-asciidoc plugin to have a better support for Asciidoc files in VIM.
"
" vim-asciidoc: https://github.com/habamax/vim-asciidoctor

" Fold all sections, that in Asciidoc are headers.
let g:asciidoctor_folding = 1

" }}}

" Writing mode {{{
"
" This mode helps to write prose with VIM. It can be enabled using "Writing"
" command.
"
" Plugins required:
"   - Pencil: https://github.com/reedes/vim-pencil
"   - Goyo: https://github.com/junegunn/goyo.vim

" It starts writing mode.
function! WritingActivate()

    " Disable syntax hightlighting, because it may cause lag with large docs.
    syntax off

    " Soft line wrap for writing by default.
    let g:pencil#wrapModeDefault = 'soft'

    " Textwidth used in hard line breaks.
    let g:pencil#textwidth = 80

    " Disable conceal, I like to see formatting.
    let g:pencil#conceallevel = 0

    call pencil#init()

    Goyo 100x50
endfunc

command! Writing call WritingActivate()

" The two next functions allow to exit VIM correclty when using ":q". Thanks to
" https://github.com/junegunn/goyo.vim/wiki/Customization
function! s:goyo_enter()
  let b:quitting = 0
  let b:quitting_bang = 0
  autocmd QuitPre <buffer> let b:quitting = 1
  cabbrev <buffer> q! let b:quitting_bang = 1 <bar> q!
endfunction

function! s:goyo_leave()
  " Quit Vim if this is the only remaining buffer
  if b:quitting && len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
    if b:quitting_bang
      qa!
    else
      qa
    endif
  endif
endfunction

augroup GoyoCommands
    autocmd! User GoyoEnter call <SID>goyo_enter()
    autocmd! User GoyoLeave call <SID>goyo_leave()
augroup END

" }}}

let python_highlight_all = 1
