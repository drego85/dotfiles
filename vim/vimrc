" vim:foldmethod=marker
" Vim personal settings.
"
" Script made by Emanuele Petriglia (ema-pe).

" UI settings. {{{

" It enable line numeration.
set number

" It enables relative number.
set relativenumber

" Disable VI compatibility.
set nocompatible

" It shows information abount row and column.
set ruler

" It allows to recognize file types.
filetype plugin on
filetype on

" It shows control line.
set laststatus=2

" It shows a box with autocompletion for commands.
set wildmenu

" It automatically reads the file if it's changed outside VIM.
set autoread

" Highlight these characters when the curson is over "{[()]}".
set showmatch

" }}}

" Searching settings {{{

" It starts searching as of typing.
set incsearch

" Hightlight matches.
set hlsearch

" }}}

" Folding settings {{{

" Enable folding.
set foldenable

" Folding the code according to the syntax.
set foldmethod=syntax

" Start folding from the high level.
set foldlevel=0

" Fold olny the first level (in C code, only the functions).
set foldnestmax=1

" 'za' -> toggle (open or close) the folder at the cursor. I've add a custom
" keybinding.
nnoremap <space> za

" }}}

" Syntaxt settings {{{

syntax on

" Set 256 color mode.
set t_Co=256

set background=dark

" Allow to don't use custom terminal colors.
let g:solarized_termcolors=256

" Set color scheme (https://github.com/altercation(vim-colors-solarized)
colorscheme solarized

" It highlights initial and final spaces and tabs.
set list lcs=trail:‧,tab:→→

" Set colorline.
set cursorline

" }}}

" Line lenght settings {{{

" It enable the right margin indicator.
set cc=81
" It sets the color of right margin indicator.
highlight ColorColumn ctermbg=red

" }}}

" Indentation settings {{{

" Tabs are spaces.
set expandtab

" Allows to insert tab with 'Shift+Tab'.
inoremap <S-Tab> <C-V><Tab>

" Default indent options:
" - tabstop (or ts) is the number of spaces that a <Tab> is made of;
" - shiftwidth (or sw) is the number of spaces to use when indenting.
" I use these settings to work with Python.
set tabstop=4
set shiftwidth=4

" Automatic indentation.
set autoindent
set smartindent

" For Makefile files, don't convert tabs into spaces.
autocmd Filetype Makefile setlocal noexpandtab

" For C files, use 8 spaces (Linux style) instead of 4.
autocmd Filetype c setlocal ts=8 sw=8

" For sh (bash) use only 2 spaces.
autocmd Filetype sh setlocal ts=2 sw=2

" }}}

" Netrw settings {{{

" Set the "tree" view (like "tree" command).
let g:netrw_liststyle = 3

" Remove the banner.
let g:netrw_banner = 0

" Open selected files to the previous window.
let g:netrw_browse_split = 4

" Set the width of the window (percent value).
let g:netrw_winsize = 20

" Open the window at right.
let g:netrw_altv = 1

" }}}

" Markdown settings {{{

" This function can be called when you open a markdown formatted file. It
" help the user to write markdown text.
function! MarkdownRules()
    " Disable the limit column.
    setlocal cc=0

    " Disable showing numbers (absolute and relative).
    setlocal nonumber
    setlocal norelativenumber

    " Make movements intuitive.
    nnoremap j gj
    nnoremap k gk

    " Don't break a single word.
    setlocal linebreak

    " Show text in the bottom of the display.
    setlocal display=lastline
endfunc

autocmd Filetype markdown :call MarkdownRules()

" This keybinding reset the 'cc' option.
nnoremap <F6> :set cc=80<CR>

" }}}

" Other settings and custom functions {{{

" Allow VIM to read settings from the file.
set modelines=1

" Toggle between number and relativenumber...
function! ToggleNumber()
    if(&relativenumber == 1)
        set norelativenumber
        set number
    else
        set relativenumber
    endif
endfunc

" .. and bind it to a custom keybinding.
nnoremap <Tab> :call ToggleNumber()<CR>

autocmd BufRead *.py nnoremap <buffer> <F5> :wa<CR> :exec '!python3' shellescape(@%, 1)<cr>
" }}}
