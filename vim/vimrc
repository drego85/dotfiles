" vim:foldmethod=marker
" Vim personal configuration. I also document here some tips and tricks.
"
" Script made by Emanuele Petriglia (ema-pe).

" UI settings. {{{

" It enable line numeration.
set number

" It enables relative number.
set relativenumber

" Disable VI compatibility.
set nocompatible

" It shows information abount row and column.
set ruler

" It allows to recognize file types.
filetype plugin on
filetype on

" It shows control line.
set laststatus=2

" It shows a box with autocompletion for commands.
set wildmenu

" It automatically reads the file if it's changed outside VIM.
set autoread

" Highlight these characters when the curson is over "{[()]}".
set showmatch

" }}}

" Searching settings {{{

" It starts searching as of typing.
set incsearch

" Hightlight matches.
set hlsearch

" Include all subdirectories when searching file (for example with "find
" <name>")
set path+=**

" Clear hightlighted text.
nnoremap \q :nohlsearch<CR>

" }}}

" Tag jumping {{{

" Create "tags" file (ctags required).
command! MakeTags !ctags -R .

" Now I can:
" - Use ^] to jump to tag under cursor
" - Use g] to resolve ambigous tags
" - Use ^t to jump back up the tag stack

" }}}

" Folding settings {{{

" Enable folding.
set foldenable

" Folding the code according to the indentation.
set foldmethod=indent

" Start folding from the high level.
set foldlevel=0

" Fold only two levels.
set foldnestmax=2

" 'za' -> toggle (open or close) the folder at the cursor. I've add a custom
" keybinding.
nnoremap <space> za

" }}}

" Syntaxt settings {{{

syntax on

" Set 256 color mode.
set t_Co=256

" Set background color.
set background=dark

set termguicolors

" Set color scheme.
colorscheme PaperColor

" It highlights initial and final spaces and tabs.
set list lcs=trail:‧,tab:→→

" Set colorline.
set cursorline

" }}}

" Line lenght settings {{{

" It enable the right margin indicator.
set cc=81
" It sets the color of right margin indicator.
highlight ColorColumn ctermbg=red

" }}}

" Indentation settings {{{

" Wrap lines longer than 80 characters.
set textwidth=80

" Tabs are spaces.
set expandtab

" Allows to insert tab with 'Shift+Tab'.
inoremap <S-Tab> <C-V><Tab>

" Default indent options:
" - tabstop (or ts) is the number of spaces that a <Tab> is made of;
" - shiftwidth (or sw) is the number of spaces to use when indenting.
" I use these settings to work with Python.
set tabstop=4
set shiftwidth=4

" Automatic indentation.
set autoindent
set smartindent

" For Makefile files, don't convert tabs into spaces.
autocmd Filetype Makefile setlocal noexpandtab

" For C files, use 8 spaces (Linux style) instead of 4.
autocmd Filetype c setlocal ts=8 sw=8

" For sh (bash) use only 2 spaces.
autocmd Filetype sh setlocal ts=2 sw=2

" }}}

" Netrw settings {{{

" Set the "tree" view (like "tree" command).
let g:netrw_liststyle = 3

" Remove the banner.
let g:netrw_banner = 0

" Open selected files to the previous window.
let g:netrw_browse_split = 4

" Set the width of the window (percent value).
let g:netrw_winsize = 20

" Open the window at right.
let g:netrw_altv = 1

" }}}

" Autocompletion {{{
"
" Most used commands:
"
"   - ^x^n for JUST this file;
"   - ^x^f for filenames;
"   - ^x^] for tags only;
"   - ^n for anything specified by the 'complete' option;
"
" Note: use ^n and ^p to go back and forth in the suggestion list.
" }}}

" Snippets {{{
"
" You can call a snippet with leading character ',' and typing the name of
" the snippet. The first letter is usually the programming language
" identification of the snippet.
"
" A snippet has this form:
"       nnoremap ,<language><keys> :-1read $HOME/.vim/snippets/<file><CR><cs>
" Where:
"   - <language>: is the character that identifies the language (es. 'j' is
"     for Java.
"   - <keys>: name of the snippet.
"   - <file> name of the snippet's file.
"   - <cs> additional commands (optional). Two common commands are:
"        1. =20 -> Indents text (useful for programming languages), in this
"                 case two lines;
"        2. A  -> go to the end and change mode to insertion.

" Disable tiemout to allow typing of snippets' keybindings without hurry.
set notimeout

" Java snippets (start with 'j'): {{{

" Import a skeleton of a class.
nnoremap ,jclass :-1read $HOME/.vim/snippets/java-class<CR>=100 2j2ela

" Import a skeleton of a interface.
nnoremap ,jinterface :-1read $HOME/.vim/snippets/java-interface<CR>=100 5j2ela

" Import a skeleton of a class with main method.
nnoremap ,jmain :-1read $HOME/.vim/snippets/java-main<CR>=100 2j2ela

" Import statements for Java's class Scanner and move the cursto to last line.
nnoremap ,jscanner :-1read $HOME/.vim/snippets/java-scanner<CR>3j

" Import method 'print' of System.out.
nnoremap ,jprint :-1read $HOME/.vim/snippets/java-print<CR>=0 $2hi

" Import method 'printf' of System.out.
nnoremap ,jprintf :-1read $HOME/.vim/snippets/java-printf<CR>=0 $2hi

" Import method 'println' of System.out.
nnoremap ,jprintln :-1read $HOME/.vim/snippets/java-println<CR>=0 $2hi

" Import simple try-catch statements.
nnoremap ,jtry :-1read $HOME/.vim/snippets/java-try<CR>=40 w

" Import method 'System.err.println' with 'System.exit(1)'.
nnoremap ,jerror :-1read $HOME/.vim/snippets/java-error<CR>=30 $2hi

" Import a skeleton of a custom exception.
nnoremap ,jexception :-1read $HOME/.vim/snippets/java-exception<CR>=230 3j2ela

" Import a skeleton of a getter method.
nnoremap ,jget :-1read $HOME/.vim/snippets/java-get<CR>=90 5j3ea

" Import a skeleton of a setter method.
nnoremap ,jset :-1read $HOME/.vim/snippets/java-set<CR>=90 5j3ea
" }}}

" }}}

" Other settings and custom functions {{{

" Allow to move up and down by a single row on the screen, and not linewise
" basis.
nnoremap j gj
nnoremap k gk

" Allow VIM to read settings from the file.
set modelines=1

" Toggle between number and relativenumber...
function! ToggleNumber()
    if(&relativenumber == 1)
        set norelativenumber
        set number
    else
        set relativenumber
    endif
endfunc

" .. and bind it to a custom keybinding.
nnoremap <Tab> :call ToggleNumber()<CR>

autocmd BufRead *.py nnoremap <buffer> <F5> :wa<CR> :exec '!python3' shellescape(@%, 1)<cr>
" }}}
