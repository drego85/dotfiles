#!/usr/bin/env -S gawk -f
#
# This is a small Gnu's AWK script to convert Markdown text files to Asciidoctor
# format. It can converts only a really small Markdown's functions, because it
# is tailored to my needs.
#
# I use this script to convert dreams and journal entries to Asciidoctor. I
# write dreams and some journal entries in Markdown because I user Markor on
# Android, a open source application that has only Markdown support.
#
# It converts every file that ends with ".md" suffix and write the result to
# the same file but with ".adoc" suffix. The original file is not touched.
#
# To learn more about Asciidoctor: https://asciidoctor.org
#
# Copyright (C) 2020 Emanuele Petriglia <inbox@emanuelepetriglia.com>
# All right reserved. This file is licensed under the MIT License.

@load "filefuncs"

BEGIN {
    if (ARGC == 1) {
        print "Error: no files given!"
        exit 1
    }
}

BEGINFILE {
    DESTFILE = FILENAME
    if ((filename_err = sub(/\.md$/, ".adoc", DESTFILE)) == 0) {
        print "Error: " FILENAME " is not a Markdown text file! Skipping..."
        nextfile
    }

    # Do not overwrite existing converted file.
    if (retval = stat(DESTFILE, destdata) == 0) {
        print "Error: " FILENAME " has already been converted to " DESTFILE
        nextfile
    }
}

# Use Asciidoctor's header instead of Markdowns's with a bottom bar.
FNR == 1 {
    # Assume that a title cannot be longer than 100 characters
    if (length($0) > 100) {
        print "Error: " FILENAME " has not a title!"
        nextfile
    }

    print "= " $0 > DESTFILE

    next
}

# Replace the bottom bar with custom Asciidoctor attributes.
FNR == 2 {
    # If there is not the title indicator (e.g. "======") in Markdown, there is
    # not the tile!
    if (index($0, "=") == 0) {
        print "Error: " FILENAME " has not the title indicator!"

        # Remove the new file because it is not well formatted.
        system("rm " DESTFILE)

        nextfile
    }

    print ":hardbreaks:" > DESTFILE

    next
}

# Remove the two last spaces, because I use ":hardbreaks:" attribute.
{
    sub(/\s\s$/, "", $0)

    print $0 > DESTFILE
}

ENDFILE {
    if (filename_err != 0)
        close(DESTFILE)
}
