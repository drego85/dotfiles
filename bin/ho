#!/usr/bin/env python3
#
# This script prints essential information about an Ho Mobile account. Ho
# Mobile is an Italian low-cost MVNO (mobile virtual network operator). This
# script prints to the standard output Voice/SMS/Internet counters, residual
# credit, active offers, basic tariff plan and last activities in 60 days. I
# use API from their web app on https://www.ho-mobile.it. Note that they can
# change API without notification, so my script would break.
#
# If you have an Ho Mobile account and you want to use this script, just run it
# passing the user name and password via command line, otherwise the script will
# ask these interactively. Please use WITH CAUTION, DO NOT TRUST ME, read the
# code before run it.
#
# This script requires Python 3.7 and 'requests' module.  If you do not provide
# user name or password, the script tries to get these using 'password-store';
# this feature is tailored to my needs, so do not use it.
#
# Output example:
#       $ ho --user Test <ENTER>
#       Password: <insert password> <ENTER>
#
#       Account ID: <account id>
#       Email: <account email>
#       Name: Emanuele
#       Surname: Petriglia
#       Phone number: <phone number>
#       Residual credit: 6.66 €
#
#       Counters:
#           Voice: 11.0 / UNLIMITED min
#           SMS: 0 / UNLIMITED sms
#           Internet: 15.77 / 50.0 GB (31.54 %)
#
#       Active offer:
#           Name: ho. 12,99
#           Description: <small description>
#           Activation cost: 10 €
#           Renewal cost: 12.99 €
#           Discount renewal cost: 6.99 €
#           Next renewal: 2019-09-16
#           Renewal count: 5
#
#       Tariff plan:
#           Name: <name>
#           Description: <small description>
#
#       Other active offers:
#           Name: <name>
#           Description: <small description>
#           <other optional fields and offers...>
#
#
#       Latest activities in 60 days:
#           Type: RENEWAL
#           Date: 2019-08-16
#           Amount: -6.99 €
#           <other activities...>
#
# Copyright (c) 2019 Emanuele Petriglia <inbox@emanuelepetriglia.com>.
# All right reserved. This file is licensed under the MIT license.

import requests
import json
from sys import argv
from argparse import ArgumentParser
from datetime import date, datetime, timedelta
from getpass import getpass, GetPassWarning
import subprocess
from dataclasses import dataclass
from typing import List


@dataclass
class UserData:
    '''This class represents the basic user data of an Ho Mobile account.'''
    account_id: str
    email: str
    name: str
    surname: str
    phone_number: str


@dataclass
class SingleCounter:
    '''This class represents a single counter. 'threshold' is optional, if it is
    'None' it means 'UNLIMITED'.'''
    name: str
    used: float
    used_unit: str
    threshold: float
    threshold_unit: str

    def __post_init__(self):
        # Unlimited threshold is actually a limit of 1000000.
        if self.threshold == 1000000:
            self.threshold = 'UNLIMITED'

    def format(self, prefix: str = '') -> str:
        '''Returns a formatted string of this counter. If 'prefix' is given,
        it is added before each field.'''
        result = f'{prefix}{self.name}: {self.used} {self.used_unit} / '

        if self.threshold == 'UNLIMITED':
            result += self.threshold
        else:
            result += f'{self.threshold} {self.threshold_unit}'

            # Unit can be different and with no usage it is useless.
            if self.threshold_unit == self.used_unit and self.used != 0:
                result += f' ({self.used * 100 / self.threshold} %)'

        return result


@dataclass
class Counters:
    '''This class represents several counters of an Ho Mobile account.'''
    voice: SingleCounter = None
    sms: SingleCounter = None
    internet: SingleCounter = None


@dataclass
class Activity:
    '''This class represents a single account activity.'''
    amount: float
    date: date
    type: str


@dataclass
class TariffPlan:
    '''This class represents a tariff plan.'''
    name: str
    description: str


@dataclass
class ActiveOffer:
    '''This class represents an offer or product supplied by Ho Mobile. Some
    field can be 'None', it means this field is missing.'''
    name: str
    description: str

    activation_cost: float = None
    discount_activation_cost: float = None

    renewal_cost: float = None
    discount_renewal_cost: float = None

    next_renewal: date = None
    renewal_count: int = None

    def format(self, prefix=None) -> str:
        '''Returns a string with the object formatted. If 'prefix' is given,
        before each field the prefix is added.'''
        if not prefix:
            prefix = ''

        ret = f'{prefix}Name: {self.name}\n' + \
              f'{prefix}Description: {self.description}\n'

        if self.activation_cost:
            ret += f'{prefix}Activation cost: {self.activation_cost} €\n'
        if self.discount_activation_cost:
            ret += f'{prefix}Discount activation cost: ' + \
                   f'{self.discount_activation_cost} €\n'
        if self.renewal_cost:
            ret += f'{prefix}Renewal cost: {self.renewal_cost} €\n'
        if self.discount_renewal_cost:
            ret += f'{prefix}Discount renewal cost: ' + \
                   f'{self.discount_renewal_cost} €\n'
        if self.next_renewal:
            ret += f'{prefix}Next renewal: {self.next_renewal.isoformat()}\n'
        if self.renewal_count:
            ret += f'{prefix}Renewal count: {self.renewal_count}\n'

        return ret


class HoMobileSession():
    '''This class manages an Ho Mobile session. It provides several method to
    get various information about an Ho Mobile account.

    HoMobileSession is a context manager, so it supports the 'with' statement.
    '''
    base_url = 'https://www.ho-mobile.it'

    endpoint = f'{base_url}/leanfe'

    def __init__(self, user: str, password: str):
        '''Creates an instance of HoMobileSession. 'user' must be an email or a
        telephone number.'''
        self.user = user
        self.password = password

    def _checkResponse(self, response):
        '''Checks if a reponse has returned with no errors. If not, it will
        raise a 'ValueError' exception.'''
        if response['operationStatus']['status'] != 'OK':
            raise ValueError('invalid user name or password: ' +
                             response['operationStatus']['diagnostic'])

    def __enter__(self):
        self.session = requests.Session()

        # All requests are made with JSON data.
        # It is important to set 'referer' to 'https://www.ho-mobile.it',
        # otherwise all requests will be refused.
        self.session.headers.update({'content-type': 'application/json',
                                     'referer': self.base_url,
                                     'connection': 'keep-alive'})

        login_url = f'{self.endpoint}/restAPI/LoginService/login'

        auth_data = {'password': self.password, 'channel': 'WEB'}
        if self.user.find('@') != -1:
            auth_data['email'] = self.user
        else:
            auth_data['phoneNumber'] = self.user

        result = self.session.post(login_url, data=json.dumps(auth_data))
        result.raise_for_status()

        result = result.json()

        self._checkResponse(result)

        # Get the first phone number as the primary number. These variables are
        # used in the next methods in the requests.
        self.phone_number = result['customerPhoneNumberList'][0]['phoneNumber']
        self.customer_id = result['customerId']

        return self

    def __exit__(self, e_type, e_val, e_traceback):
        logout_url = f'{self.endpoint}/logout'

        result = self.session.get(logout_url)
        result.raise_for_status()

        self.session.close()

    def get_general_info(self) -> UserData:
        '''Returns a 'UserData' instance. Any error during the request are
        passed to the caller.'''
        info_url = f'{self.endpoint}/getEncodedUserData/HMTL'

        result = self.session.post(info_url)
        result.raise_for_status()

        result = result.json()

        return UserData(result['accountId'], result['email'], result['name'],
                        result['surname'], result['currentPhoneNumber'])

    def get_counters(self) -> Counters:
        '''Returns a 'Counters' instance. Any error during the request are
        passed to the caller.'''
        counters_url = f'{self.endpoint}/restAPI/CountersService/getCounters'

        request_data = {'channel': 'WEB', 'phoneNumber': self.phone_number}

        result = self.session.post(counters_url, data=json.dumps(request_data))
        result.raise_for_status()

        result = result.json()

        self._checkResponse(result)

        result = result['countersList'][0]['countersDetailsList']
        data = Counters()

        data.voice = SingleCounter('Voice',
                                   float(result[0]['value']),
                                   result[0]['valueUnit'],
                                   float(result[0]['threshold']),
                                   result[0]['thresholdUnit'])

        data.sms = SingleCounter('SMS',
                                 int(result[1]['value']),
                                 'sms',
                                 int(result[1]['threshold']),
                                 'sms')

        data.internet = SingleCounter('Internet',
                                      float(result[2]['value']),
                                      result[2]['valueUnit'],
                                      float(result[2]['threshold']),
                                      result[2]['thresholdUnit'])

        return data

    def get_residual_credit(self) -> float:
        '''Returns the residual credit of the account. Any error during the
        request are passed to the caller.'''
        credit_url = f'{self.endpoint}/custom/restAPI/getResidualCredit'

        request_data = {'channel': 'WEB', 'phoneNumber': self.phone_number}

        result = self.session.post(credit_url, data=json.dumps(request_data))
        result.raise_for_status()

        result = result.json()

        self._checkResponse(result)

        return result['balance']

    def get_latest_activities(self) -> List[Activity]:
        '''Returns a list of 'Activity', ordered by date. Any error during the
        request are passed to the caller.'''
        data = []

        activities_url = f'{self.endpoint}/restAPI/' + \
                         'SimManagementService/getLastActivities'

        end_date = date.today()
        # This endpoint accepts max 60 days.
        start_date = end_date - timedelta(days=60)

        request = {'channel': 'WEB', 'customerId': self.customer_id,
                   'phoneNumber': self.phone_number,
                   'dataType': 'NOT_ZERO_COST', 'roaming': 'ALL',
                   'startDate': start_date.isoformat(),
                   'endDate': end_date.isoformat()
                   }

        result = self.session.post(activities_url, data=json.dumps(request))
        result.raise_for_status()

        result = result.json()

        self._checkResponse(result)

        for activity in result['detailList']:
            # Get only date, not time.
            amount = activity['amount']
            data.append(Activity(
                amount=amount if activity['source'] == 'VP' else -amount,
                date=datetime.fromisoformat(activity['day']).date(),
                type=activity['event']))

        data.sort(key=lambda a: a.date, reverse=True)

        return data

    def get_products_info(self) -> (TariffPlan, List[ActiveOffer]):
        '''Returns a tuple of 'TariffPlan' and a list of 'ActiveOffer' of an Ho
        Mobile account.

        The list of active offers contains at least one element. The first
        element is the main active offer.

        Any error during the reuqest are passed to the caller.'''
        def buildActiveOffer(offer) -> ActiveOffer:
            ret = ActiveOffer(offer['name'], offer['description'])

            ret.activation_cost = offer['activationCost']
            ret.discount_activation_cost = offer['discountActivationCost']
            ret.renewal_cost = offer['renewalCost']
            ret.discount_renewal_cost = offer['discountRenewalCost']
            # I do not know why timestamp have three more zeroes than normal...
            if offer['nextRenewalDate']:
                ret.next_renewal = date.fromtimestamp(offer['nextRenewalDate']
                                                      // 1000)
            ret.renewal_count = offer['executedRenewals']

            return ret

        products_url = f'{self.endpoint}/restAPI/' + \
                       'CatalogInfoactivationService/getCatalogInfoactivation'

        request = {'channel': 'WEB', 'phoneNumber': self.phone_number}

        result = self.session.post(products_url, data=json.dumps(request))
        result.raise_for_status()

        result = result.json()

        self._checkResponse(result)

        tariff = TariffPlan(result['activeOffer']['tariffPlan']['name'],
                            result['activeOffer']['tariffPlan']['description'])

        offers = [buildActiveOffer(result['activeOffer']['productList'][0])]

        for offer in result['otherProducts']['productList']:
            if offer['activationDate']:
                offers.append(buildActiveOffer(offer))

        return tariff, offers


def _checkUserPwd(args, parser: ArgumentParser):
    '''Try to get username and password using 'password-store', otherwise ask
    interactively if necessary.'''
    if not args.user and not args.password:
        try:
            result = subprocess.run(['pass', 'shop/ho-mobile.it'],
                                    capture_output=True)

            if result.returncode == 0:
                # It's a text file with '\n' line endings.
                file = result.stdout.decode().split('\n')

                args.password = file[0]
                args.user = file[1]
        except FileNotFoundError:
            pass # Ignore this exception, ask interactively.

    try:
        if not args.user:
            args.user = input('User name: ')
        if not args.password:
            args.password = getpass()
            print() # Add an empty line for a better output format.
    except (EOFError, KeyboardInterrupt):
        parser.error('failed to get user input')
    except GetPassWarning:
        pass


if __name__ == '__main__':
    description = '''This script is useful to see some information about you
    account on Ho Mobile (https://www.ho-mobile.it). Ho Mobile is a low cost
    mobile virtual network operator (MVNO) created by Vodafone Italy.
    '''

    epilog = '''This script requires the module \'requests\' and \'pass\' (if
    you do not provide user and password).
    '''

    parser = ArgumentParser(description=description, epilog=epilog)

    parser.add_argument('-u', '--user',
                        help='''email or phone number of your Ho Mobile account
                        (if not provided it will be asked interactively).''')
    parser.add_argument('-p', '--password',
                        help='''password of your Ho Mobile account (if not
                        provided it will be asked interactively, this is the
                        preferred way.''')

    args = parser.parse_args(argv[1:]) # argv[0] is the program name.

    _checkUserPwd(args, parser)

    with HoMobileSession(args.user, args.password) as session:
        info = session.get_general_info()
        result_credit = session.get_residual_credit()
        counters = session.get_counters()
        activities = session.get_latest_activities()
        tariffplan, activeoffers = session.get_products_info()

        print('Account ID:', info.account_id)
        print('Email:', info.email)
        print('Name:', info.name)
        print('Surname:', info.surname)
        print('Phone number:', info.phone_number)
        print('Residual credit:', result_credit, '€')
        print()

        print('Counters:')
        print(counters.voice.format('    '))
        print(counters.sms.format('    '))
        print(counters.internet.format('    '))
        print()

        print('Active offer:')
        print(activeoffers[0].format(prefix='    '))

        print('Tariff plan:')
        print('    Name:', tariffplan.name)
        print('    Description:', tariffplan.description)
        print()

        if len(activeoffers) > 1:
            print('Other active offers:')

            for offer in activeoffers[1:]:
                print(offer.format(prefix='    '))

        print('Latest activities in 60 days:')

        for activity in activities:
            print('    Type:', activity.type)
            print('    Date:', activity.date.isoformat())
            print('    Amount:', activity.amount, '€')
            print()
