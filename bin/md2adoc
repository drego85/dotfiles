#!/usr/bin/env -S gawk -f
#
# This small GNU AWK script converts a Markdown file to Ascidoc. It can convert
# only a small subset of Markdown features, because it is tailored to my needs.
#
# It converts every given file that ends with ".md" suffix to the same file but
# with ".adoc". suffix. It doesn't overwrite an existend destination file and
# doesn't touch the original file.
#
# I use this script to convert dreams and journal entries to Asciidoc. I use
# Markdown because I use Markor, an open source Android application that only
# supports this format.
#
# Copyright (C) 2020 Emanuele Petriglia <inbox@emanuelepetriglia.com>
# All right reserved. This file is licensed under the MIT License.

@load "filefuncs"

# Print "text" to stderr and exit with error code 1. Note that END rules are
# executed.
function err(text) {
    print "md2adoc: ERROR: " FILENAME ": " text > "/dev/stderr"
    exit 1
}

# Print "text" to stderr and skip to the next file.
function skip(text) {
    print "md2adoc: WARNING: " FILENAME ": " text " Skipping..." > "/dev/stderr"
    nextfile
}

BEGIN {
    if (ARGC == 1)
        err("no files given!")
}

BEGINFILE {
    # A given file may be not a valid Markdown file. I check the first three
    # lines, then I open the output file. But if the invalid file has less than
    # three lines, the "FNR == 3" rule won't be called, so I need to check if I
    # opened a file during the elaboration.
    FILE_OPENED = 0
}

FNR == 1 {
    # Remove UTF-8 BOM.
    sub(/^\xef\xbb\xbf/, "")

    TITLE = $0
}

FNR == 2 {
    if (match($0, /^=+$/) == 0)
        skip("doesn't have setext heading underline.")
}

FNR == 3 {
    if (length($0) != 0)
        skip("there is not space between header and body.")

    # Open and write to the new converted file.
    DESTFILE = FILENAME
    if (sub(/\.md$/, ".adoc", DESTFILE) == 0)
        skip("doesn't end with '.md' suffix!")

    FILE_OPENED = 1

    # Do not overwrite existing converted file.
    if (stat(DESTFILE, tmp) == 0)
        skip("cannot overwrite '" DESTFILE "'.")

    print "= " TITLE > DESTFILE
    print ":hardbreaks:" > DESTFILE
    print > DESTFILE
}

FNR > 3 {
    # Remove trailing spaces on each line.
    sub(/  $/, "")

    print > DESTFILE
}

ENDFILE {
    if (FILE_OPENED == 1)
        close(DESTFILE)
}
