#!/usr/bin/env python3
#
# This script downloads the latest Alena Aenami's artwork from ArtStation. I use
# feed RSS to extract images because the WebApp's API is protected with Google
# Captcha.
#
# There are only two options: you can specify the download directory with
# '--directory' and to force downloading, even if the images already exist on
# disk. The default download directory is my folder '~/Pictures/backgrounds`.
#
# Python 3.7+ and 'request' module are needed to run this script.
#
# Copyright (c) 2019 Emanuele Petriglia <inbox@emanuelepetriglia.com>
# All right reserved. This file is licensed under the MIT license.

import xml.etree.ElementTree as xml
import re
from typing import Tuple, List
from datetime import datetime, date
from dataclasses import dataclass
from pathlib import Path
from argparse import ArgumentParser, Namespace

import requests


@dataclass
class Submission():
    '''It represents an artwork submission.'''
    title: str
    pubDate: date
    images_url: List[str]


class AlenaAenamiDownloader():
    '''This class downloads the latest Alena Aenami's artwork to a directory.'''

    def __init__(self, directory: Path, force: bool = False):
        '''Returns a AlenaAenamiDownloader instance. 'directory' is the folder
        to save the images. If 'force' is true, images are always downloaded,
        even if the images already exist.'''
        self.directory = directory
        self.force = force

    def run(self):
        '''Extracts the latest Alena Aenami's artwork and downloads the
        images.'''
        sub = self.__extract_latest_submission()

        self.__process_submission(sub)

    def __extract_latest_submission(self) -> Submission:
        '''Returns a Submission instance of the latest Alena Aenami artwork from
        ArtStation.'''
        # I use feed RSS because other methods require more work.
        url = 'https://www.artstation.com/aenamiart.rss'

        response = requests.get(url)
        response.raise_for_status()

        content_schema = 'http://purl.org/rss/1.0/modules/content/'
        xml.register_namespace('atom', 'http://www.w3.org/2005/Atom')
        xml.register_namespace('content', content_schema)
        namespace = {'content': content_schema}

        item = xml.fromstring(response.text).find('channel').find('item')

        title = item.find('title').text
        pubDate = datetime.strptime(item.find('pubDate')
                                        .text, '%a, %d %b %Y %X %z').date()
        images = item.find('content:encoded', namespace).text

        # raw[5:] removes initial string 'src="'.
        images_url = [raw[5:] for raw in re.findall('src=[^?]*', images)]

        return Submission(title, pubDate, images_url)

    def __process_submission(self, sub: Submission) -> None:
        '''Process 'sub' and download, if necessary, all images.'''
        for url in sub.images_url:
            # Build path {dir}/{filename}.
            dest_file = Path(args.directory, url.split('/')[-1])

            if not self.force and dest_file.exists():
                pass
            else:
                self.__download_image(url, dest_file)

    def __download_image(self, url: str, dest_file: Path) -> None:
        '''Downloads the image 'url' and saves it to 'dest_file'.'''
        # Use stream, because the request is for a binary image.
        with requests.get(url, stream=True) as data:
            data.raise_for_status()

            with open(dest_file, 'wb') as dest:
                for chunk in data.iter_content(chunk_size=8192):
                    if chunk:
                        dest.write(chunk)


def _checkArgs(default_dir=str) -> Tuple[ArgumentParser, Namespace]:
    '''Checks command line arguments and returns an ArgumentParse instance and
    the parser command line Namespace.'''
    description = f'''It downloads the latest Alena Aenami's artwork from
    ArtStation. The artworks are saved by default on {default_dir}.'''

    epilog = '''You need 'request' module to run this Python script.'''

    parser = ArgumentParser(description=description, epilog=epilog)

    parser.add_argument('-d', '--directory', default=default_dir,
                        help='Directory to save artworks.')
    parser.add_argument('-f', '--force', action='store_true',
                        help='Force download and overwrite existent artworks.')

    args = parser.parse_args()

    # Check if directory exists.
    args.directory = Path(args.directory)

    if not args.directory.is_dir():
        parser.error(f'''directory {args.directory} does not exist.''')

    return parser, args


if __name__ == '__main__':
    default_dir = f'{Path.home()}/Pictures/backgrounds'
    parser, args = _checkArgs(default_dir)

    app = AlenaAenamiDownloader(args.directory, args.force)

    app.run()
