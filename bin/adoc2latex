#!/usr/bin/env -S gawk -f
#
# This small GNU AWK script converts a simple Asciidoctor file to LaTeX. It
# recognizes only a small amount of Asciidoctor features, it also use some
# custom attributes of the header (like ":abstract:").
#
# I use this script to convert my Asciidoctor files to LaTeX files, so I can
# produce a good PDF output.
#
# It converts every file that ends with ".adoc" suffix given in the command line
# to the same name but with ".tex" suffix. The original file is not touched, and
# if the ".tex" file exists, it doesn't overwrite.
#
# Copyright (C) 2020 Emanuele Petriglia <inbox@emanuelepetriglia.com>
# All right reserved. This file is licensed under the MIT License.

@load "filefuncs"

#
# Custom functions.
#

# Print "text" to stderr and exit with error code 1. Note that END rules are
# executed.
function err(text) {
    print "adoc2latex: ERROR: " FILENAME ": " text > "/dev/stderr"
    exit 1
}

# Print "text" to stderr and skip to the next file.
function skip(text) {
    print "adoc2latex: WARNING: " FILENAME ": " text " Skipping..." > "/dev/stderr"
    INVALID_SOURCE = 1
    nextfile
}

# Blank lines are special. They are not printed immediately, but only while
# scanning the next record, so I need to remember if the previous record was a
# blank line.
function print_blank_line() {
    if (!PREVIOUS_RECORD_WAS_BLANK)
        return

    PREVIOUS_RECORD_WAS_BLANK = 0

    if (PREVIOUS_PREVIOUS_RECORD_WAS_TEXT == 1) {
        PREVIOUS_PREVIOUS_RECORD_WAS_TEXT = 0

        print "\\bigskip" > DESTFILE
    }

    print "" > DESTFILE
}

# This function converts some formatting marks (e.g. footnotes).
function convert_paragraph(paragaph) {
    # Convert footnote.
    while ((where = match(paragaph, /footnote\[(.+)\]/, groups)) != 0)
        sub(/footnote\[.+\]/, "\\footnote{" groups[1] "}", paragaph)

    return paragaph
}

BEGINFILE {
    # Because in END rule I close the file, but I need to know if it was opened.
    FILE_OPENED = 0

    DESTFILE = FILENAME

    if (!sub(/\.adoc$/, ".tex", DESTFILE))
        skip("filename doesn't ends with '.adoc")

    # Do not overwrite existing converted file.
    if (!(retval = stat(DESTFILE, destdata)))
        skip("cannot overwrite '" DESTFILE "'.")

    # Any Asciidoctor document starts with a block of contigous lines that
    # defines some useful metadata. Only the document title and author are
    # mandatory.
    SECTION_HEADER = 1

    # Body section with text and chapters.
    SECTION_BODY = 0

    # Do not render table of contents.
    ENABLE_TOC = 0

    # Metadata that are understood, other are ignored (like ":start:").
    TITLE = ""
    AUTHOR = ""
    ABSTRACT = ""
    DESCRIPTION = ""
    INSPIRATION = ""
    DATE = ""

    # I need these two variables because a blank line inside the document it may
    # mean different things. If there is a blank line between two paragraph it
    # means I need to add a vertical space between them.
    PREVIOUS_RECORD_WAS_BLANK = 0
    PREVIOUS_PREVIOUS_RECORD_WAS_TEXT = 0
}

#
# Header parsing.
#

FNR == 1 {
    if (!match($0, /^= ([[:alnum:] ']*)/, groups)) {
        print "Error: " FILENAME " doesn't have title! Skipping..."
        nextfile
    }

    TITLE = groups[1]
}

FNR == 2 {
    # Match only the author name and surname, ignore email.
    if (!match($0, /([[:alnum:] ]*)/, groups)) {
        print "Error: " FILENAME " doesn't have author! Skipping..."
        nextfile
    }

    # Because the previous regex may capture a trailing space.
    if ((where = match(groups[1], / $/)))
        AUTHOR = substr(groups[1], 1, where - 1)
    else
        AUTHOR = groups[1]
}

SECTION_HEADER && FNR > 2 {
    if (!length($0)) # The header is a contigous block of non empty lines.
        SECTION_HEADER = 0
    else if (match($0, /^:abstract: (.*)$/, groups))
        ABSTRACT = groups[1]
    else if (match($0, /^:description: (.*)$/, groups))
        DESCRIPTION = groups[1]
    else if (match($0, /^:inspiration: (.*)$/, groups))
        INSPIRATION = groups[1]
    else if (match($0, /^:end: (.*)$/, groups))
        DATE = groups[1]
    else if ($0 == ":toc:")
        ENABLE_TOC = 1

    # Ignore other medatada, like ":start:" or ":hardbreaks:"
}

!SECTION_HEADER && !SECTION_BODY {
    FILE_OPENED = 1

    print "\\documentclass[12pt,a4paper]{article}" > DESTFILE
    print "\\usepackage[utf8]{inputenc}" > DESTFILE
    print "\\usepackage[italian]{babel}" > DESTFILE
    print "\\usepackage[T1]{fontenc}" > DESTFILE
    print > DESTFILE
    print "% Add links to all sections." > DESTFILE
    print "\\usepackage[hidelinks]{hyperref}" > DESTFILE
    print > DESTFILE
    print "% Center the headings for all sectional units" > DESTFILE
    print "\\usepackage[center]{titlesec}" > DESTFILE
    print > DESTFILE
    print "% I like this font!" > DESTFILE
    print "\\usepackage{librebaskerville}" > DESTFILE
    print > DESTFILE
    print "% I asked to some friends if they like the default spacing between" > DESTFILE
    print "% lines, but they replied that it is too small, so I increased it" > DESTFILE
    print "\\usepackage{setspace}" > DESTFILE
    print "\\onehalfspacing" > DESTFILE
    print > DESTFILE

    print "\\title{" TITLE "}" > DESTFILE
    print "\\author{" AUTHOR "}" > DESTFILE

    if (length(DATE))
        print "\\date{" DATE "}" > DESTFILE

    print > DESTFILE
    print "\\begin{document}" > DESTFILE
    print > DESTFILE
    print "\\maketitle" > DESTFILE

    if (length(ABSTRACT)) {
        print > DESTFILE
        print "\\begin{abstract}" > DESTFILE
        print ABSTRACT > DESTFILE
        print "\\end{abstract}" > DESTFILE
    }

    if (ENABLE_TOC) {
        print > DESTFILE
        print "\\tableofcontents" > DESTFILE
    }

    if (length(DESCRIPTION)) {
        print > DESTFILE
        print "\\subsubsection*{Descrizione}" > DESTFILE
        print DESCRIPTION > DESTFILE
    }

    if (length(INSPIRATION)) {
        print > DESTFILE
        print "\\subsubsection*{Ispirazione}" > DESTFILE
        print INSPIRATION > DESTFILE
    }

    print > DESTFILE
    print "\\clearpage" > DESTFILE

    SECTION_BODY = 1
}

#
# Document body.
#

SECTION_BODY {
    # Handle page break.
    if (match($0, /^<<<$/)) {
        PREVIOUS_PREVIOUS_RECORD_WAS_TEXT = 0

        print_blank_line()

        print "\\clearpage" > DESTFILE

        next
    }

    # Handle chapter heading.
    if (match($0, /^== (.*)$/, groups)) {
        PREVIOUS_PREVIOUS_RECORD_WAS_TEXT = 0

        print_blank_line()

        # Some chapters have a leading number and I don't want it. As example,
        # with "== 10 - My chapter" the chapter name is "My chapter", not "10 -
        # My chapter".
        if (match(groups[1], /^[[:digit:]]+ - (.+)$/, title))
            section = title[1]
        else
            section = groups[1]

        # Add link to this section.
        print "\\phantomsection" > DESTFILE
        # Sections are always unnumbered!
        print "\\section*{" section "}" > DESTFILE

        # Unnumbered sections are not displayed inside ToC.
        if (ENABLE_TOC)
            print "\\addcontentsline{toc}{section}{" section "}" > DESTFILE

        next
    }

    print_blank_line()

    # Do not print blank line immediately, it may be a paragraph spacing.
    if (!length($0)) {
        PREVIOUS_RECORD_WAS_BLANK = 1

        next
    }

    print convert_paragraph($0) > DESTFILE
    print "" > DESTFILE
    PREVIOUS_PREVIOUS_RECORD_WAS_TEXT = 1
}

ENDFILE {
    if (FILE_OPENED) {
        # ENDFILE rules are executed also with 'nextfile' command.
        if (!INVALID_SOURCE)
            print "\\end{document}" > DESTFILE

        close(DESTFILE)

        if (INVALID_SOURCE)
            system("rm -f " DESTFILE)
    }
}
