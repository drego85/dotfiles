#!/usr/bin/env python3

from subprocess import run, CalledProcessError
from sys import exit, argv
from requests import get, patch, ConnectionError, HTTPError
from json import dumps


def get_secret_data(key, line):
    '''
    Retrive a secret data file using 'pass' and return the selected line as
    a string.

    Arguments:
        key: the secret data file (example 'shopping/amazon.com').
        line: the line you want to get, it must be non negative.

    Returns:
        It returns the selected line from the file specified by 'key'.

    Raises:
        ValueError: is 'line' is a negative number.
        IndexError: if you select a line that doesn't exists.
        SystemExit: if the is any error during the execution of 'pass'.

    Notes:
        If there is any error during the execution of 'pass', an error message
        is printed to the standard error.
    '''

    if line < 0:
        raise ValueError("line must be a positive number")

    try:
        result = run(['pass', key], capture_output=True, check=True)

        # The 'stdout' attribute is a byte string, also passwordstore files are
        # simply text files, so returns the wanted line.
        return result.stdout.decode().split('\n')[line]
    except FileNotFoundError:
        exit('ERROR: Failed to run pass, it is installed?')
    except CalledProcessError:
        exit('ERROR: Failed to get secret data.')


def get_aliases_list(api_key, url_endpoint):
    auth = {'authorization': f'Apikey {api_key}'}

    try:
        result = get(url_endpoint, headers=auth)

        result.raise_for_status()

        return result.json()['aliases']
    except ConnectionError:
        exit('ERROR: Failed to connect to \'https://api.ganti.net\'')
    except HTTPError as error:
        exit(f'ERROR: Failed to get mailbox info: {error}')


def send_aliases_list(api_key, url_endpoint, aliases_list):
    auth = {'authorization': f'Apikey {api_key}',
            'Content-Type': 'application/json'}

    payload = dumps({'aliases': aliases_list})

    try:
        patch(url_endpoint, headers=auth, data=payload)
    except ConnectionError:
        exit('ERROR: Failed to connect to \'https://api.ganti.net\'')
    except HTTPError as error:
        exit(f'ERROR: Failed to send mailbox info: {error}')


if __name__ == '__main__':
    if len(argv) > 0:
        if len(argv) == 1:
            print("Help")
            exit()

        arg = argv[1]

        if arg == '-h' or arg == '--help':
            print('''Usage: gandi-aliases [-h] {list | add | remove } ...

This script is useful to manage email aliases for 'inbox@emanuelepetriglia.com'.
It uses Gandi API, the script is tailored for my use cases, because it uses
'pass(1)' to retrieve API key and email ID.

Commands:
    list
        Retrieve the email aliases for 'inbox@emanuelepetriglia.com' and
        print them to stdout.

    add <ALIAS> ...
        Add new aliases for 'inbox@emanuelepetriglia.com'. If a given alias
        if invalid or a duplicate, it will fail and don't update aliases list.

    remove <ALIAS> ...
        Remove aliases from 'inbox@emanuelepetriglia.com'. If a given alias
        doesn't exist, it will fail and don't update aliases list.

Options:
    -h, --help
        Show this message and exit.

This scripts needs Python 3.6 to run, it also requires 'pass' (to retrive secret
data', and 'requests' module, but is preinstalled on Fedora.
''')
        elif arg == 'list':
            api_key = get_secret_data('shop/gandi.net', line=4)

            domain = 'emanuelepetriglia.com'
            email_id = get_secret_data(f'email/inbox@emanuelepetriglia.com', 3)
            url = 'https://api.gandi.net/v5/email/mailboxes'
            url_endpoint = f'{url}/{domain}/{email_id}'

            for alias in get_aliases_list(api_key, url_endpoint):
                print(alias)

        elif arg == 'add':
            api_key = get_secret_data('shop/gandi.net', line=4)

            domain = 'emanuelepetriglia.com'
            email_id = get_secret_data(f'email/inbox@emanuelepetriglia.com', 3)
            url = 'https://api.gandi.net/v5/email/mailboxes'
            url_endpoint = f'{url}/{domain}/{email_id}'

            aliases_to_add = argv[2:]
            aliases = get_aliases_list(api_key, url_endpoint)

            for alias_to_add in aliases_to_add:
                if alias_to_add in aliases:
                    exit(f'Alias \'{alias_to_add}\' is already added!')

                aliases.append(alias_to_add)

            send_aliases_list(api_key, url_endpoint, aliases)

        elif arg == 'remove':
            api_key = get_secret_data('shop/gandi.net', line=4)

            domain = 'emanuelepetriglia.com'
            email_id = get_secret_data(f'email/inbox@emanuelepetriglia.com', 3)
            url = 'https://api.gandi.net/v5/email/mailboxes'
            url_endpoint = f'{url}/{domain}/{email_id}'

            aliases_to_remove = argv[2:]
            aliases = get_aliases_list(api_key, url_endpoint)

            for alias_to_remove in aliases_to_remove:
                if alias_to_remove not in aliases:
                    exit(f'Alias \'{alias_to_remove}\' doesn\'t exist!')

                aliases.remove(alias_to_remove)

            send_aliases_list(api_key, url_endpoint, aliases)
