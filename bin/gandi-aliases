#!/usr/bin/env python3
#
# This Python script is useful to manage my email aliases. My email is hosted on
# Gandi.net, so I use their API to add, list and remove email aliases.
#
# This script is tailored to my needs, for example I use 'pass' to manage secret
# data (such as API key and email ID), but it shouldn't be too difficult to edit
# with your needs.
#
# You only need 'request' module to run my script, it is installed by default on
# Fedora!
#
# Some tips:
#     - Get number of aliases: 'gandi-aliases list | wc --lines'
#     - Check if an alias exists: 'gandi-aliases list | grep foo'
#
# Copyright (c) 2019 Emanuele Petriglia <inbox@emanuelepetriglia.com>
# All rights reserved. This file is licensed under the MIT license.

import subprocess
import sys
import requests
import json


class GandiAliases():
    '''This class wraps the entire script.'''

    def __init__(self, argv):
        '''Create a new GandiAliases object.

        Arguments:
            argv: a list of system command line arguments.
        '''
        self.__aliases_list = []
        self.__command_to_run = self.__command_help
        self.__alias_list_required = {
                self.__command_add,
                self.__command_remove
                }

        # Parse arguments.
        if len(argv) >= 2:
            command = argv[1]

            # '--help' is for only backward support.
            if command == 'help' or command == '--help':
                self.__command_to_run = self.__command_help
            elif command == 'list':
                self.__command_to_run = self.__command_list
            elif command == 'add':
                self.__command_to_run = self.__command_add
                self.__aliases_list = argv[2:]
            elif command == 'remove':
                self.__command_to_run = self.__command_remove
                self.__aliases_list = argv[2:]
            else:
                sys.exit(f'ERROR: \'{command}\' is not a command!')

            # 'add' or 'remove' commands require a list of aliases!
            if self.__command_to_run in self.__alias_list_required \
               and len(self.__aliases_list) == 0:
                sys.exit("ERROR: You must give at leat one alias!")

    def run(self):
        '''Run the script.'''
        if self.__command_to_run != self.__command_help:
            # Prepare URL and API key to contact Gandi.net API.
            api_key = self.__get_secret_data('shop/gandi.net')[4]
            email_id = \
                self.__get_secret_data('email/inbox@emanuelepetriglia.com')[3]
            base_url = 'https://api.gandi.net/v5/email/mailboxes'

            # Default URL and headers.
            self.__headers = {'Authorization': f'Apikey {api_key}'}
            self.__url = f'{base_url}/emanuelepetriglia.com/{email_id}'

        self.__command_to_run()

    def __command_help(self):
        '''Prints the help message on the standard output.'''
        help_message = '''Usage: gandi-aliases {help | list | add | remove} ...

This script is useful to manage email aliases for 'inbox@emanuelepetriglia.com'.
It uses Gandi API, the script is tailored for my use cases, because it uses
'pass(1)' to retrieve API key and email ID.

Commands:
    list
        Retrieve the email aliases for 'inbox@emanuelepetriglia.com' and
        print them to stdout.

    add <ALIAS> ...
        Add new aliases for 'inbox@emanuelepetriglia.com'. If a given alias
        if invalid or a duplicate, it will fail and don't update aliases list.

    remove <ALIAS> ...
        Remove aliases from 'inbox@emanuelepetriglia.com'. If a given alias
        doesn't exist, it will fail and don't update aliases list.

    help
        Show this message and exit.

This scripts needs Python 3.6 to run, it also requires 'pass' (to retrieve
secret data), and 'requests' module, but is preinstalled on Fedora.
'''

        print(help_message, end='')

    def __command_list(self):
        '''Prints an aliases list on the standard output.'''
        for alias in self.__get_aliases_list():
            print(alias)

    def __command_add(self):
        '''Add the new aliases.'''
        current_aliases = self.__get_aliases_list()

        for alias in self.__aliases_list:
            if alias in current_aliases:
                sys.exit(f'Alias \'{alias}\' is already added!')

            current_aliases.append(alias)

        self.__send_aliases_list(current_aliases)

    def __command_remove(self):
        '''Remove some aliases.'''
        current_aliases = self.__get_aliases_list()

        for alias in self.__aliases_list:
            if alias not in current_aliases:
                sys.exit(f'Alias \'{alias}\' doesn\'t exist!')

            current_aliases.remove(alias)

        self.__send_aliases_list(current_aliases)

    def __get_aliases_list(self):
        '''Returns the aliases list.'''
        try:
            result = requests.get(self.__url, headers=self.__headers)

            result.raise_for_status()

            return result.json()['aliases']
        except requests.ConnectionError:
            sys.exit('ERROR: Failed to connect to \'https://api.ganti.net\'')
        except requests.HTTPError as error:
            sys.exit(f'ERROR: Failed to get mailbox info: {error}')

    def __send_aliases_list(self, aliases_list):
        '''Send the aliases list 'aliases_list'.'''
        self.__headers['Content-Type'] = 'application/json'

        payload = json.dumps({'aliases': aliases_list})

        try:
            result = requests.patch(self.__url,
                                    headers=self.__headers,
                                    data=payload).json()

            if 'errors' in result:
                for error in result['errors']:
                    print(f'ERROR: {error["description"]}', file=sys.stderr)

                sys.exit(1)

        except requests.ConnectionError:
            sys.exit('ERROR: Failed to connect to \'https://api.ganti.net\'')
        except requests.HTTPError as error:
            sys.exit(f'ERROR: Failed to send mailbox info: {error}')

    @staticmethod
    def __get_secret_data(key):
        ''' Retrieve a secret data file using 'pass'.'''
        try:
            result = subprocess.run(['pass', key],
                                    capture_output=True,
                                    check=True)

            # It's a text file with '\n' line endings.
            return result.stdout.decode().split('\n')
        except FileNotFoundError:
            sys.exit('ERROR: Failed to run \'pass\', it is installed?')
        except subprocess.CalledProcessError:
            sys.exit(f'ERROR: Failed to get secret data: pass: {result.stderr}')


if __name__ == '__main__':
    app = GandiAliases(sys.argv)

    app.run()
