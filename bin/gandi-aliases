#!/usr/bin/env python3
#
# This Python scripts is useful to manage Gandi mailbox aliases. It is tailored
# with my needs, because I use 'pass' (from 'passwordstore') to store API key
# and email ID.
#
# Some tips:
#   - Get number of aliases: 'gandi-aliases list | wc --lines'
#   - Check if an alias exists: 'gandi-aliases list | grep foo'
#
# Copyright (c) 2019 Emanuele Petriglia <inbox@emanuelepetriglia.com>
# All rights reserved. This file is licensed under the MIT license.

import subprocess
import sys
import requests
import json


class App():

    def __init__(self, argv):
        self.__command_to_run = self.__command_help

        # Parse arguments.
        if len(argv) >= 2:
            command = argv[1]

            if command == 'help':
                self.__command_to_run = self.__command_help
            elif command == 'list':
                self.__command_to_run = self.__command_list
            elif command == 'add':
                self.__command_to_run = self.__command_add
                self.__aliases_list = argv[2:]
            elif command == 'remove':
                self.__command_to_run = self.__command_remove
                self.__aliases_list = argv[2:]
            else:
                sys.exit(f'ERROR: \'{command}\' is not a command!')

            # Check only for 'add' and 'remove' command.
            try:
                if len(self.__aliases_list) == 0:
                    sys.exit("ERROR: You must give at leat one alias!")
            except AttributeError:  # The command wasn't 'add' or 'remove'!
                pass

    def run(self):
        # Prepare URL and API key to contact Gandi.net API.
        if self.__command_to_run != self.__command_help:
            api_key = self.__get_secret_data('shop/gandi.net')[4]
            email_id = \
                self.__get_secret_data('email/inbox@emanuelepetriglia.com')[3]
            base_url = 'https://api.gandi.net/v5/email/mailboxes'

            # Default URL and headers.
            self.__headers = {'Authorization': f'Apikey {api_key}'}
            self.__url = f'{base_url}/emanuelepetriglia.com/{email_id}'

        self.__command_to_run()

    def __command_help(self):
        help_message = '''Usage: gandi-aliases {help | list | add | remove} ...

This script is useful to manage email aliases for 'inbox@emanuelepetriglia.com'.
It uses Gandi API, the script is tailored for my use cases, because it uses
'pass(1)' to retrieve API key and email ID.

Commands:
    list
        Retrieve the email aliases for 'inbox@emanuelepetriglia.com' and
        print them to stdout.

    add <ALIAS> ...
        Add new aliases for 'inbox@emanuelepetriglia.com'. If a given alias
        if invalid or a duplicate, it will fail and don't update aliases list.

    remove <ALIAS> ...
        Remove aliases from 'inbox@emanuelepetriglia.com'. If a given alias
        doesn't exist, it will fail and don't update aliases list.

    help
        Show this message and exit.

This scripts needs Python 3.6 to run, it also requires 'pass' (to retrieve
secret data), and 'requests' module, but is preinstalled on Fedora.
'''

        print(help_message, end='')

    def __command_list(self):
        for alias in self.__get_aliases_list():
            print(alias)

    def __command_add(self):
        current_aliases = self.__get_aliases_list()

        for alias in self.__aliases_list:
            if alias in current_aliases:
                sys.exit(f'Alias \'{alias}\' is already added!')

            current_aliases.append(alias)

        self.__send_aliases_list(current_aliases)

    def __command_remove(self):
        current_aliases = self.__get_aliases_list()

        for alias in self.__aliases_list:
            if alias not in current_aliases:
                sys.exit(f'Alias \'{alias}\' doesn\'t exist!')

            current_aliases.remove(alias)

        self.__send_aliases_list(current_aliases)

    def __get_aliases_list(self):
        try:
            result = requests.get(self.__url, headers=self.__headers)

            result.raise_for_status()

            return result.json()['aliases']
        except requests.ConnectionError:
            sys.exit('ERROR: Failed to connect to \'https://api.ganti.net\'')
        except requests.HTTPError as error:
            sys.exit(f'ERROR: Failed to get mailbox info: {error}')

    def __send_aliases_list(self, aliases_list):
        self.__headers['Content-Type'] = 'application/json'

        payload = json.dumps({'aliases': aliases_list})

        try:
            requests.patch(self.__url, headers=self.__headers, data=payload)
        except requests.ConnectionError:
            sys.exit('ERROR: Failed to connect to \'https://api.ganti.net\'')
        except requests.HTTPError as error:
            sys.exit(f'ERROR: Failed to send mailbox info: {error}')

    def __get_secret_data(self, key):
        '''
        Retrieve a secret data file using 'pass'.

        Arguments:
            key: the secret data file (example 'shopping/amazon.com').

        Returns:
            It returns the selected line from the file specified by 'key'.

        Raises:
            IndexError: if you select a line that doesn't exists.
            SystemExit: if the is any error during the execution of 'pass'.

        Notes:
            If there is any error during the execution of 'pass', an error
            message is printed to the standard error.
        '''
        try:
            result = subprocess.run(['pass', key],
                                    capture_output=True,
                                    check=True)

            # It's a text file with '\n' line endings.
            return result.stdout.decode().split('\n')
        except FileNotFoundError:
            sys.exit('ERROR: Failed to run \'pass\', it is installed?')
        except subprocess.CalledProcessError:
            sys.exit(f'ERROR: Failed to get secret data: pass: {result.stderr}')


if __name__ == '__main__':
    app = App(sys.argv)

    app.run()
