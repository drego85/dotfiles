#!/usr/bin/env bash
#
# This script is useful to manage aliases for my email address and domain,
# "inbox@emanuelepetriglia.com".
#
# Use '-h' or '--help' option to get usage information. This script requires:
#   - pass: to get private api key;
#   - curl: to send and get api requests;
#   - jq: to manage JSON data.
#
# Copyright (c) 2019 Emanuele Petriglia <inbox@emanuelepetriglia.com>
# All right reserved. This file is licensed under the MIT license.

readonly DOMAIN="emanuelepetriglia.com"
readonly EMAIL="inbox@$DOMAIN" # Used in output messages.
readonly BASE_ENDPOINT="https://api.gandi.net/v5/email/mailboxes/$DOMAIN/"

readonly CURL_OPTS="--silent --show-error"

#
# BEGIN helper functions
#

# Print all arguments to the standard error and exits with error code 1.
error() {
  echo "$@" >&2
  exit 1
}

# Set '$API_KEY' and '$ENDPOINT' readonly variables to send requests to Gandi.
# If they are already set, the function does nothing.
get_sensible_data() {
  [[ -z "$API_KEY" ]] && readonly API_KEY="$(pass shop/gandi.net | sed '5p;d')"
  [[ "$API_KEY" ]] || error "Failet to get api key."

  if [[ -z "$ENDPOINT" ]]; then
    local email_id="$(pass email/inbox@emanuelepetriglia.com | sed '4p;d')"
    [[ "$email_id" ]] || error "Failed to get email id."

    readonly ENDPOINT="$BASE_ENDPOINT$email_id"
  fi
}

# Print to the standard output aliases list for '$EMAIL' as JSON array. It uses
# '$ENDPOINT' and '$API_KEY'. If it fails, it will exit with error code 1.
get_aliases_list() {
  get_sensible_data

  local data
  data="$(curl $CURL_OPTS -X GET "$ENDPOINT" \
               --header "authorization: apikey $API_KEY" 2>&1)"

  [[ "$?" != "0" ]] && error "Failed to get GET reponse: $data"

  aliases="$(echo "$data" | jq '.aliases')"

  [[ "$aliases" == "null" ]] && error "Failed to get email aliases: $data"

  echo "$aliases"
}

# Update aliases list for email '$EMAIL', sending the updated JSON array using
# '$ENDPOINT' and '$API_KEY'. If it fails it will exit with error code 1.
#
# Parameter:
#   $1  - JSON aliases list.
#
send_aliases_list() {
  [[ "$1" ]] || error "No aliases list given."
  local alias_list="$(echo "$1" | jq '{ aliases: . }')"

  get_sensible_data

  local response
  response="$(curl $CURL_OPTS -X PATCH "$ENDPOINT" \
                   --header "authorization: apikey $API_KEY" \
                   --header "content-type: application/json" \
                   --data "$alias_list" 2>&1)"

  [[ "$?" != "0" ]] && error "Failed to send aliases list: $response"

  [[ "$(echo "$response" | grep "error")" ]] \
    && error "Failed to update aliases list: $response"
}

# It locally update a given JSON aliases list, then it prints the list to the
# standard output. It can remove an alias or add an alias. If it fails, it will
# exit with error code 1.
#
# Parameters:
#   $1  - JSON alias list;
#   $2  - Alias to add or remove;
#   $3  - Add ('add') or remove ('remove') the alias.
#
update_aliases_list() {
  [[ "$1" ]] || error "No aliases list given."
  [[ "$2" ]] || error "No alias given."
  [[ "$3" && "$3" == "add" || "$3" == "remove" ]] \
    || error "No command given ('add' or 'remove')."

  local alias_list="$1"
  local alias="$2"
  local command="$3"
  local operation

  if [[ "$command" == "add" ]]; then
    [[ "$(echo "$alias_list" | grep "\"$alias\"")" ]] \
      && error "Alias '$alias' already exist."

    operation="+="
  else
    [[ "$(echo "$alias_list" | grep "\"$alias\"")" ]] \
      || error "Alias '$alias' doesn't exist."

    operation="-="
  fi

  echo "$alias_list" | jq --monochrome-output ". $operation [\"$alias\"]"
}

#
# END helper functions
#

#
# BEGIN subcommand functions
#

# Show usage informations.
cmd_help() {
  cat <<-_EOF
Usage:
    $PROGRAM [-g|--get]
    $PROGRAM [-a|--add] [alias ...]
    $PROGRAM [-r|--remove] [alias ...]
    $PROGRAM [-c|--check] [alias ...]

  This script is useful to manage email aliases for '$EMAIL'.
  It uses Gandi API, the script is tailored for my use cases, because is uses
  'pass(1)' to retrieve API key and email ID.

Available options:
    -g, --get
        Retrieve the email aliases for '$EMAIL' and print
        them to stdout.

    -a, --add=alias ...
        Add new aliases for '$EMAIL'. If a given alias
        if invalid or a duplicate, it will fail and
        don't update aliases list.

    -r, --remove=alias ...
        Remove aliases from '$EMAIL'. If a given alias
        doesn't exist, it will fail and don't update
        aliases list.

    -c, --check=alias
        Check if the given aliases exists for '$EMAIL'.

    -h, --help
        Show this message and exit.

This script uses 'curl' and 'jq', they must be installed on the system.
_EOF
}


# Print to the standard output the JSON aliases list.
cmd_get() {
  get_aliases_list
}

# Add aliases to '$EMAIL', minimium one.
cmd_add() {
  [[ "$1" ]] || error "No aliases given."

  local list
  list="$(get_aliases_list)"
  [[ "$?" == "0" ]] || error "$list"

  while [[ "$1" ]]; do
    list="$(update_aliases_list "$list" "$1" "add")"
    [[ "$?" == "0" ]] || error "$list"

    shift
  done

  send_aliases_list "$list"
}

# Remove aliases from '$EMAIL', minimium one.
cmd_remove() {
  [[ "$1" ]] || error "No aliases given."

  local list
  list="$(get_aliases_list)"
  [[ "$?" == "0" ]] || error "$list"

  while [[ "$1" ]]; do
    list="$(update_aliases_list "$list" "$1" "remove")"
    [[ "$?" == "0" ]] || error "$list"

    shift
  done

  send_aliases_list "$list"
}

# Check the existend of various aliases, minumium one.
cmd_check() {
  [[ "$1" ]] || error "No aliases given."

  local alias_list
  alias_list="$(get_aliases_list)"
  [[ "$?" == "0" ]] || error "$alias_list"

  while [[ "$1" ]]; do
    if [[ "$(echo "$alias_list" | grep "\"$1\"")" ]]; then
      echo "Alias '$1' exist."
    else
      echo "Alias '$1' doesn't exist."
    fi

    shift
  done
}

#
# END subcommands functions
#

PROGRAM="${0##*/}"

[[ -z "$(command -v curl)" ]] && error "curl is needed to run this script."
[[ -z "$(command -v jq)" ]] && error "jq is needed to run this script."

case "$1" in
  -h|--help) shift;   cmd_help "$@" ;;
  -g|--get) shift;    cmd_get "$@" ;;
  -a|--add) shift;    cmd_add "$@" ;;
  -r|--remove) shift; cmd_remove "$@" ;;
  -c|--check) shift;  cmd_check "$@" ;;
  *) shift;           cmd_help "$@" ;;
esac

exit 0
