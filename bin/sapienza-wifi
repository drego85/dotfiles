#!/usr/bin/env bash
#
# This script logins automatically to the Sapienza's WiFi network, without open
# a broswer and insert manually the username and password.
#
# This script requires these programs:
#   - wget: to do the connection (POST);
#   - mktemp: to store temporary file during the login;
#   - notify-sent: to send notification about the login/logout operation.
#   - pass (optional): to retrieve the password.
#
# I use `pass` to manage and store password, but you can insert your password
# with the global variable `PASSWORD`.
#
# TODO:
#   - Add error handling.
#
# Copyright (c) 2019 Emanuele Petriglia <inbox@emanuelepetriglia.com>
# All right reserved. This file is licensed under the MIT license.

# Location of the password in the password store database.
PASSWORD_LOCATION="university/uniroma1.it"

# Login details.
USERNAME="1798177"
#PASSWORD="" # The password is retrieved only when login command is given.

# Path and name of the file with logout ID, used to logout.
LOGOUT_ID_FILE="/tmp/sapienza-wifi-logout-id"

#
# BEGIN helper functions
#

# It prints all arguments to the standard error and exits with error code 1.
error() {
  echo "$@" >&2
  exit 1
}

#
# END helper functions
#

#
# BEGIN subcommand functions
#

# It shows usage informations.
cmd_help() {
  cat <<-_EOF
Usage:
    $PROGRAM <command>

  If no command is given, the default command is 'login'.

Available commands:
    login
        It connects to Sapienza's Wifi network, using the username and password
        coded in the script (the password is retrieved with 'pass').

    check
        It prints "connected" or "disconnected" if there is an Internet
        connection. By default is tries to connect to Sapienza's Web home page.

This script uses 'wget', 'mktemp', 'notify-send' and 'pass', they must be
installed on the system.

For more informations read the header of this script.
_EOF
}

# It prints to the standard output "conncted" or "disconnected" if there is an
# Internet connection or not.
cmd_check_network() {
  local test_page="https://www.uniroma1.it/"

  wget --quiet --spider "$test_page"
  local result=$?

  if [[ $result -eq 0 ]]; then
    echo "connected"
  else
    echo "disconnected"
  fi
}

# It logins to the Sapienza's Wifi network, using the username and the password.
# It also save in a temporary file the logout ID, it will be used to logout.
cmd_login() {
  # HTTPS otherwise curl will fail, gawk extracts the full redirect URL.
  local login_url="$(curl 'http://uniroma1.it' --head --silent \
    | gawk '/Location/ { print substr($2, 1, index($2, "&") - 1) }')"

  # Extract zone data.
  local zone="${login_url##*=}"

  # Temporary file to store HTML result of the request.
  local html_result
  html_result="$(mktemp)"

  curl --silent --output "$html_result" \
       --data "auth_user=$USERNAME" \
       --data "auth_pass=$(pass $PASSWORD_LOCATION | head -n 1)" \
       --data "zone=$zone" \
       --data "rediurl=https://www.uniroma1.it/it/" \
       --data "accept=Accetto+-+Accept" \
       "$login_url"

  rm "$html_result"

  if [[ $(cmd_check_network) != "connected" ]]; then
    notify-send --icon=network-error "Sapienza's Wifi" "Failed to login"
    error "Failed to login"
  fi

  notify-send --icon=network-wireless "Sapienza's WiFi" "Logged"
}

#
# END subcommands functions
#

PROGRAM="${0##*/}"

case "$1" in
  login)                cmd_login ;;
  check)                cmd_check_network ;;
  -h|--help|help)       cmd_help ;;
  *)                    cmd_login ;;
esac

exit 0
