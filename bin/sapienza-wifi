#!/usr/bin/env bash
#
# This script logins automatically to the Sapienza's WiFi network, without open
# a broswer and insert manually the username and password.
#
# This script requires these programs to run:
#   - curl: to send HTTP/HTTPS requests;
#   - notify-send (optional): to send desktop notification on login operation.
#   - pass (optional): to retrieve the password.
#
# I use 'pass' to manage and store username and password, but you can insert
# your data with the global variables "USERNAME" and "PASSWORD". You can set
# them as a environment variables or here in the script.
#
# Copyright (c) 2019-2020 Emanuele Petriglia <inbox@emanuelepetriglia.com>
# All right reserved. This file is licensed under the MIT license.

# Location of password and username for Sapienza using 'pass'.
PASSWORD_LOCATION="university/uniroma1.it"

# Login details. I use "pass", so they're commented.
#USERNAME=""
#PASSWORD=""

#
# BEGIN helper functions
#

# It prints all arguments to the standard error and exits with error code 1.
error() {
  echo "$@" >&2
  exit 1
}

#
# END helper functions
#

#
# BEGIN subcommand functions
#

# It shows usage informations.
cmd_help() {
  cat <<-_EOF
Usage:
    $PROGRAM <command>

  If no command is given, the default command is 'login'.

Available commands:
    login
        It connects to Sapienza's WiFi network, using the username and password
        retrived from 'pass' or variables (see below).

    check
        It prints "connected" or "disconnected" if there is an Internet
        connection. By default is tries to connect to Sapienza's Web home page.

This scripts uses 'curl' to send HTTP/HTTPS requests. 'notify-send' is optional,
'pass' is optional only if you provide the username and password in a different
way.

To set custom username and password, without using 'pass', read the header of
this script.
_EOF
}

# It prints to the standard output "conncted" or "disconnected" if there is an
# Internet connection or not.
cmd_check_network() {
  local test_page="https://www.uniroma1.it/"

  wget --quiet --spider "$test_page"
  local result=$?

  if [[ $result -eq 0 ]]; then
    echo "connected"
  else
    echo "disconnected"
  fi
}

# It logins to the Sapienza's Wifi network, using the username and the password.
# It also save in a temporary file the logout ID, it will be used to logout.
cmd_login() {
  # HTTPS otherwise curl will fail, gawk extracts the full redirect URL.
  local login_url="$(curl 'http://uniroma1.it' --head --silent \
    | gawk '/Location/ { print substr($2, 1, index($2, "&") - 1) }')"

  # Extract zone data.
  local zone="${login_url##*=}"

  # Fallback using "pass" to retrive my data.
  if [[ -z "$USERNAME" && -n "$(command -v pass)" ]]; then
    USERNAME="$(pass $PASSWORD_LOCATION | sed -e 2p -e d)"
  fi

  if [[ -z "$PASSWORD" && -n "$(command -v pass)" ]]; then
    PASSWORD="$(pass $PASSWORD_LOCATION | sed -e 1p -e d)"
  fi

  # Temporary file to store HTML result of the request.
  local html_result
  html_result="$(mktemp)"

  curl --silent --output "$html_result" \
       --data "auth_user=${USERNAME:?Username is missing!}" \
       --data "auth_pass=${PASSWORD:?Password is missing!}" \
       --data "zone=$zone" \
       --data "rediurl=https://www.uniroma1.it/it/" \
       --data "accept=Accetto+-+Accept" \
       "$login_url"

  rm "$html_result"

  if [[ $(cmd_check_network) != "connected" ]]; then
    if [[ -n "$(command -v notify-send)" ]]; then
      notify-send --icon=network-error "Sapienza's Wifi" "Failed to login"
      exit 1
    else
      error "Failed to login"
    fi
  fi

  if [[ -n "$(command -v notify-send)" ]]; then
    notify-send --icon=network-wireless "Sapienza's WiFi" "Logged"
  else
    echo "Succesfully logged on Sapienza's WiFi!"
  fi
}

#
# END subcommands functions
#

PROGRAM="${0##*/}"

case "$1" in
  login)                cmd_login ;;
  check)                cmd_check_network ;;
  -h|--help|help)       cmd_help ;;
  *)                    cmd_login ;;
esac

exit 0
