#!/usr/bin/env bash
#
# This script manages a systemd-nspawn container names exactly same as this
# script.
#
# Copyright (C) 2018 Emanuele Petriglia (ema-pe) <inbox@emanuelepetriglia.me>.
# This file is licensed under the MIT license.

# If the user has "sudo" installed and no root privileges the script tries to
# use sudo.
SUDO=""

#
# BEGIN helper functions
#

# Prints a message to stderr and quit with error status 1.
error() {
  echo "$@" >&2
  exit 1
}

# Quit with error status 1 if no root privileges available or can't user
# sudo.
check_root() {
  if [[ $EUID != 0 ]]; then
    if [[ -z "$(which sudo)" ]]; then
      error "Please run as root"
    else
      SUDO="sudo"
    fi
  fi
}

# Run a commant if the container is active.
if_active() {
  if [[ "$(cmd_status)" == "active" ]]; then
    "$@"
  fi
}

# Run a commant if the container is inactive.
if_inactive() {
  if [[ "$(cmd_status)" == "inactive" ]]; then
    "$@"
  fi
}

#
# END helper functions

# Shows help usage on standard output.
cmd_usage() {
  cat <<-_EOF
Usage:
    $PROGRAM on
        Starts the systemd-nspawn's container named with $PROGRAM.
        It is a wrapper to "machinectl start $PROGRAM".
    $PROGRAM off
        Poweroffs the systemd-nspawn's container named with $PROGRAM.
        It is a wrapper to "machinectl poweroff $PROGRAM".
    $PROGRAM status
        Prints to the standard output the status of systemd-nspawn's container
        named with $PROGRAM. It prints "active" if it is started, otherwise
        "inactive".
        It is a wrapper to "systemctl is-active
        systemd-nspawn@$PROGRAM.service".
    $PROGRAM shell <user>
        Open an interactive Bash shell session in $PROGRAM container. If no
        arguments are passed, it uses the default user called "user",
        otherwiser uses the given user name.
        If $PROGRAM is not started the script starts it.
        It is a wrapper to "machinectl shell $PROGRAM --uid=user /bin/bash".
    $PROGRAM help
        Shows this text.
_EOF
}

# Starts the container.
cmd_on() {
  check_root

  if_inactive $SUDO machinectl start $PROGRAM
}

# Poweroffs the container.
cmd_off() {
  check_root

  if_active $SUDO machinectl poweroff $PROGRAM
}

# Prints to standard output "active" if the container is active, otherwise
# "inactive".
cmd_status() {
  check_root

  systemctl is-active systemd-nspawn@$PROGRAM.service
}

# Open a shell in the container. It takes an optional argument that is the user
# used to open the shell; default value is "user".
cmd_shell() {
  check_root

  local user="$1"

  if [[ -z "$user" ]]; then
    user="user"
  fi

  if_inactive cmd_on

  # Delay is necessary to wait that the container is ready.
  sleep 0.5

  $SUDO systemd-run --quiet --machine=$PROGRAM --pty --uid=$user /bin/bash
}

PROGRAM="${0##*/}"
COMMAND="$1"

case "$1" in
  help|--help) shift;       cmd_usage "$@" ;;
  off) shift;               cmd_off "$@" ;;
  on) shift;                cmd_on "$@" ;;
  status) shift;            cmd_status "$@" ;;
  shell) shift;             cmd_shell "$@" ;;
  *) COMMAND="shell"        cmd_shell "$@" ;;
esac

exit 0
