#!/usr/bin/env bash
#
# This script manages a systemd-nspawn container names exactly same as this
# script.
#
# Copyright (C) 2018 Emanuele Petriglia (ema-pe) <inbox@emanuelepetriglia.me>.
# This file is licensed under the MIT license.

set -e

#
# BEGIN global variables
#

# If the user has "sudo" installed and no root privileges the script tries to
# use sudo.
SUDO=""

PROGRAM="${0##*/}" # Script name without path.

#
# BEGIN helper functions
#

# Prints a message to stderr and quit with error status 1.
error() {
  echo "$@" >&2
  exit 1
}

# Quit with error status 1 if no root privileges available or can't user
# sudo.
check_root() {
  if [[ $EUID != 0 ]]; then
    if [[ -z "$(which sudo)" ]]; then
      error "Please run as root"
    else
      SUDO="sudo"
    fi
  fi
}

# Run a commant if the container is active.
if_active() {
  if [[ "$(cmd_status)" == "active" ]]; then
    "$@"
  fi
}

# Run a commant if the container is inactive.
if_inactive() {
  if [[ "$(cmd_status)" == "inactive" ]]; then
    "$@"
  fi
}

# Quit with error status 1 if the given absolute path doesn't exist on the 
# container.
check_path_container() {
  local path="$1"

  $SUDO systemd-run --quiet --unit=path-check --machine $PROGRAM /bin/bash -c \
                    "cd / && if [[ -e $path ]]; then echo yes; else echo no; fi"

  local result="$($SUDO journalctl --machine $PROGRAM -u path-check \
                 -n 1 -b -q -o cat)"

  if [[ "$result" = "no" ]]; then
    error "Invalid path for container: $path"
  fi
}

# Quit with error status 1 if the given path doesn't exist on the local folder.
check_path_local() {
  local path="$1"

  if [[ ! -e "$path" ]]; then
    error "Invalid path for local folder: $path"
  fi
}

#
# BEGIN command functions
#

# Shows help usage on standard output.
cmd_usage() {
  cat <<-_EOF
Usage:
    $PROGRAM on
        Starts the systemd-nspawn's container named with $PROGRAM.
        It is a wrapper to "machinectl start $PROGRAM".
    $PROGRAM off
        Poweroffs the systemd-nspawn's container named with $PROGRAM.
        It is a wrapper to "machinectl poweroff $PROGRAM".
    $PROGRAM status
        Prints to the standard output the status of systemd-nspawn's container
        named with $PROGRAM. It prints "active" if it is started, otherwise
        "inactive".
        It is a wrapper to "systemctl is-active
        systemd-nspawn@$PROGRAM.service".
    $PROGRAM shell <user>
        Open an interactive Bash shell session in $PROGRAM container. If no
        arguments are passed, it uses the default user called "user",
        otherwiser uses the given user name.
        If $PROGRAM is not started the script starts it.
        It is a wrapper to "machinectl shell $PROGRAM --uid=user /bin/bash".
    $PROGRAM copy-to <src> <dst>
        Copy a file (or directory) from the local folder to the container. If
        "dest" starts with a slash "/" it is considered as an absolute path,
        otherwise the default prefix is "/home/user".
    $PROGRAM copy-from <src> <dst>
        Copy a file (or directory) from the container to the local folder. If
        "src" starts with a slash "/" it is considered as an absolute path,
        otherwise the default prefix is "/home/user".
        If "dst" is not provided, it is used last part of path (filename) as
        the file namw of new file.
    $PROGRAM help
        Shows this text.
_EOF
}

# Starts the container.
cmd_on() {
  check_root

  if_inactive $SUDO machinectl start $PROGRAM

  # Delay is necesary to wait until the container is ready.
  sleep 0.5
}

# Poweroffs the container.
cmd_off() {
  check_root

  if_active $SUDO machinectl poweroff $PROGRAM
}

# Prints to standard output "active" if the container is active, otherwise
# "inactive".
cmd_status() {
  check_root

  systemctl is-active systemd-nspawn@$PROGRAM.service
}

# Open a shell in the container. It takes an optional argument that is the user
# used to open the shell; default value is "user".
cmd_shell() {
  check_root

  local user="$1"

  if [[ -z "$user" ]]; then
    user="user"
  fi

  if_inactive cmd_on

  $SUDO systemd-run --quiet --machine=$PROGRAM --pty --uid=$user /bin/bash
}

# Allow to copy a file (or directory) from the local folder to the container. If
# the destination path starts with a slash "/" it is considered an absolute
# path, otherwise the default folder is "/home/user/".
# If no destination path is inserted, default is "/home/user/" and the file or
# directory has the same name of source file.
cmd_copy_to() {
  check_root

  if_inactive cmd_on

  local src="$1"
  local dst="$2"

  if [[ -z "$src" ]]; then
    error "It is required at least the source path"
  fi

  check_path_local "$src"

  # Take the last argument of a path.
  if [[ -z "$dst" ]]; then
    dst="$(echo "$src" | grep -o [^/]*$)"
  fi

  if [[ "$dst" =~ ^[^/] ]]; then
    dst="/home/user/$dst"
  fi

  $SUDO machinectl copy-to $PROGRAM $src $dst
}

# Allow to copy a file (or directory) from the container to the local folder. If
# the source path starts with a slash "/" it is considered an absolute path,
# otherwise the default folder is "/home/user/".
cmd_copy_from() {
  check_root

  if_inactive cmd_on

  local src="$1"
  local dst="$2"

  if [[ -z "$src" ]]; then
    error "It is required at least the source path"
  fi

  # Take the last argument of a path.
  if [[ -z "$dst" ]]; then
    dst="$(echo "$src" | grep -o [^/]*$)"
  fi

  if [[ "$src" =~ ^[^/] ]]; then
    src="/home/user/$src"
  fi

  check_path_container "$src"

  $SUDO machinectl copy-from $PROGRAM $src $dst
}

COMMAND="$1"

if [[ -z "$COMMAND" ]]; then
  cmd_shell "$@" # Default command if no arguments are given.
fi

case "$1" in
  help|--help) shift;       cmd_usage "$@" ;;
  off) shift;               cmd_off "$@" ;;
  on) shift;                cmd_on "$@" ;;
  status) shift;            cmd_status "$@" ;;
  shell) shift;             cmd_shell "$@" ;;
  copy-to) shift;           cmd_copy_to "$@" ;;
  copy-from) shift;         cmd_copy_from "$@" ;;
  *)                        error "Unrecognized option \"$1\"" ;;
esac

exit 0
