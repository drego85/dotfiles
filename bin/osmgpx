#!/usr/bin/env python3
#
# This script is useful to do a batch upload of GPX tracks to OpenStreetMap,
# filtering each file by removing GPX points closer to a given coordinate point
# (for privacy reasons).
#
# This script is tailored with my needs, so do not use it without have read
# every line of code!
#
# I use cURL instead of requests, because I failed to use requests to send a
# valid request to OpenStreetMap.
#
# Only one warning: give your user name instead of you email, otherwise the
# printed URL, of your uploaded file, will not work!
#
# Copyright (c) 2019 Emanuele Petriglia <inbox@emanuelepetriglia.com>
# All right reserved. This file is licensed under the MIT license.

import sys
from typing import List
from dataclasses import dataclass
import xml.etree.ElementTree as xml
from tempfile import NamedTemporaryFile
from subprocess import run, CalledProcessError
import math


class GeoPoint():
    '''A geographical point.

    This class represents a geographical point, with a latitude and a longitude.
    It can also calculate the distance to another point.
    '''

    earthRadius = 6371e3
    '''Radius of earth (in metres).'''

    latitude = None
    '''Latitude (in degrees).'''

    longitude = None
    '''Longitude (in degrees).'''

    def __init__(self, latitude: float, longitude: float):
        '''Constructs a GeoPoint, using 'latitude' and 'longitude'. The only
        acceptable format is a numeric pair (as for example 52.205, 0.119).

        Raises ValueError if 'latitude' or 'longitude' are invalid geographical
        points in degrees.
        '''
        if not -180 < latitude < 180:
            raise ValueError(f'invalid latitude: {latitude}')

        if not -90 < longitude < 90:
            raise ValueError(f'invalid longitude: {longitude}')

        self.latitude = latitude
        self.longitude = longitude

    def distance(self, point=None) -> float:
        '''Returns the distance along the surface of the earth from 'this' point
        to destination point in metres. Uses Harvesine formula.

        'point' must be a GeoPoint instance or a tuple (latitude, longitude),
        otherwise ValueError is raised.

        Haversine formula is good if the two points are closer. Because this
        project is used to filter GPX files, the points are never too distant.
        '''
        if not isinstance(point, GeoPoint):
            if not isinstance(point, tuple) or len(point) != 2:
                raise ValueError('GeoPoint or latitude/longitude must be given')

            point = GeoPoint(point[0], point[1])

        # Thanks to http://www.movable-type.co.uk/scripts/latlong.html for a
        # good explaination.
        p1la, p1lo = math.radians(self.latitude), math.radians(self.longitude)
        p2la, p2lo = math.radians(point.latitude), math.radians(point.longitude)

        dla = p2la - p1la
        dlo = p2lo - p1lo

        a = math.sin(dla / 2) ** 2 + \
            math.cos(p1la) * math.cos(p2la) * math.sin(dlo / 2) ** 2

        c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))

        return GeoPoint.earthRadius * c

    def __repr__(self):
        return f'<GeoPoint latitude={self.latitude} longitude={self.longitude}>'


def filterGpxFile(gpx, point, radius):
    '''Filters *gpx* file, removing all close points to *point* for *radius*
    metres. At the end the resulting file is written to a temporary file and it
    is returned.

    *gpx* is a filename or file object (opened for binary read) containing GPX
    data.

    *point* is a GeoPoint.

    *radius* is the radius in metres from *point* in which points are removed.

    xml.etree.ElementTree.ParseError is raised if *file* is a invalid XML file.

    ValueError is raise if *file* is a invalid GPX file.
    '''
    gpx_schema = 'http://www.topografix.com/GPX/1/1'

    xml.register_namespace('', gpx_schema)
    xml.register_namespace('xsi', 'http://www.w3.org/2001/XMLSchema-instance')

    namespace = {'gpx': gpx_schema}

    tree = xml.parse(gpx)

    # GPX points are under: trk -> trkseg.
    for track in tree.getroot().findall('gpx:trk', namespace):
        for trackSegment in track.findall('gpx:trkseg', namespace):
            for gpxPoint in trackSegment.findall('gpx:trkpt', namespace):
                lat = float(gpxPoint.get('lat'))
                lon = float(gpxPoint.get('lon'))

                if not lat or not lon: # Maybe it is a malformed GPX file.
                    raise ValueError('Missing \'lat\' or \'lon\' attribute')

                if point.distance(GeoPoint(lat, lon)) <= radius:
                    trackSegment.remove(gpxPoint)

    out = NamedTemporaryFile(prefix=gpx if isinstance(gpx, str) else gpx.name,
                             suffix='.gpx')

    tree.write(out, encoding='UTF-8', xml_declaration=True)

    return out


class Osmgpx():
    '''Main class that manages the application.'''

    def __init__(self, argv):
        if len(argv) == 1 or \
                (len(argv) >= 2 and (argv[1] == '--help' or argv[1] == '-h')):
            self.__command_help()
            sys.exit()

        self.data = Data(argv[1:])

    def run(self):
        '''Processes and uploads every GPX file.'''
        baseUrl = 'https://api.openstreetmap.org'
        gpxUrl = f'{baseUrl}/api/0.6/gpx/create'
        linkUrl = f'{baseUrl}/user/{self.data.user}/traces'

        for gpx in self.data.files:
            try:
                gpx = open(gpx, 'rb')
                print(f'Processing {gpx.name}...', end='')
                out = filterGpxFile(gpx,
                                    GeoPoint(self.data.latitude,
                                             self.data.longitude),
                                    self.data.radius)
                print(' OK', end='')
                gpx.close()

                # Because 'out' will be passed to 'curl'.
                out.flush()

                print(' Uploading GPX...', end='')
                # I use cURL because I failed to use requests to send a valid
                # request to OpenStreetMap.
                result = run(['curl', gpxUrl,
                              '--user', f'{self.data.user}:{self.data.pwd}',
                              '-F', f'file=@{out.name}',
                              '-F', f'description={self.data.description}',
                              '-F', f'tags={self.data.tag}',
                              '-F', f'visibility={self.data.visibility}'],
                             check=True,
                             capture_output=True)

                # Direct link to the uploaded GPX file.
                print(f' OK: {linkUrl}/{result.stdout.decode()}')
            except xml.ParseError as error:
                sys.exit(f'Error in file {gpx.name}: {error}')
            except FileNotFoundError as error:
                sys.exit(error)
            except CalledProcessError as error:
                sys.exit(f'Failed to upload {gpx.name}: '
                         + error.stderr.decode())

    def __command_help(self):
        '''Prints the help message on the standard output.'''
        help_message = '''Usage: osmgpx [--help|-h] [FILE]...

This script is useful to do a batch upload of GPX tracks to OpenStreetMap,
filtering each file by removing GPX points closer to a given coordinate point
(for privacy reasons).

WARNING: This script is tailored to my needs, because it uses 'pass' to get use,
password and all data required to send the GPX track. If you want to use it, you
need to modify it.

Options:
    -h, --help
        Prints an help message and exit.

This scripts requires 'pass' (to retrieve secret data), and 'curl'.
'''

        print(help_message, end='')


@dataclass(init=False)
class Data:
    '''This class contains all data required to send GPX track to
    OpenStreetMap.'''

    user: str # Username (not email).
    pwd: str
    radius: int # Radius in meters in which remove GPX points from a point.
    latitude: float
    longitude: float
    description: str
    tag: str
    visibility: str # Visibility of uploaded GPX file.
    files: List[str] # Files to process.

    def __init__(self, files):
        self.files = files

        try:
            result = run(['pass', 'other/openstreetmap.org'],
                         capture_output=True,
                         check=True)

            output = result.stdout.decode().split('\n')

            self.pwd = output[0]
            self.user = output[2]

            index = 3
            while (output[index] != '----'): # Start of secret data.
                index += 1

            self.latitude = float(output[index + 1])
            self.longitude = float(output[index + 2])
            self.radius = int(output[index + 3])
            self.description = output[index + 4]
            self.tag = output[index + 5]
            self.visibility = output[index + 6]
        except CalledProcessError as error:
            sys.exit(f'Failed to get secret data: {error.stderr.decode()}')
        except FileNotFoundError:
            sys.exit('Failed to find \'pass\' executable')


if __name__ == '__main__':
    app = Osmgpx(sys.argv)
    app.run()
