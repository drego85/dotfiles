#!/usr/bin/env python3
#
# This syncs a music folder tree to a destination. All FLAC files are converted
# to OGG files calling 'ffmpeg'. Untracked or outdated files on destination are
# removed. It is useful to sync a music library on a device with limited space.
#
# Usage:
#   musicconvert [-h] [-s src] [-j n] destination
#
#   Options and parameters:
#       destination: the destination directory;
#       -s, --source src: source directory (default is current working
#                         directory);
#       -j, --jobs n: number of parallel FMPEG processes to convert FLAC files;
#       -d, --dry-run: print the effects but do not touch files.
#
# Usage example:
#   $ musicconvert --source ~/music /path/to/device/music --jobs 10
#
# This script requires Python 3.6+ and 'ffmpeg'.
#
# TODO:
#   - Add counters? (converted files, copied files, ignored...)
#   - Improve design?
#   - Add optional typing?
#
# Copyright (c) 2019 Emanuele Petriglia <inbox@emanuelepetriglia.com>
# All right reserved. This file is licensed under the MIT license.

import os
from shutil import copy, rmtree
from concurrent.futures import ThreadPoolExecutor, as_completed
from subprocess import run, SubprocessError
from sys import argv
from argparse import ArgumentParser


class MusicConvert():
    '''This class provides a sync between two folders ('src' and 'dst'). It
    removes all untracked and old files on 'dst', then it syncs files from 'src'
    to 'dst'. During the sync, it copies all files except for FLAC files,
    instead they are converted to OGG using FFMPEG.

    To start the sync, call 'start' method.
    '''

    def __init__(self, src, dst, jobs=1, dry=False):
        '''Create a MusicConvert object and check the given arguments.

        'src' is the source directory, 'dst' is the destination directory and
        'jobs' is the number of ffmpeg conversion to run in parallel.

        If 'jobs' is not a positive number, or 'src' and 'dst' are the same
        directory, or 'dst' is a subdirectory of 'src', ValueError is raised.

        If 'src' doesn't exist, FileNotFoundError is raised.

        If 'src' or 'dst' are not directories, NotADirectoryError is raised.

        If 'dry' is True, print the effects of this script, but do not touch any
        file.
        '''
        self.src = os.path.abspath(src)
        self.dst = os.path.abspath(dst)

        if os.path.exists(self.dst) and not os.path.isdir(self.dst):
            raise NotADirectoryError(f'{self.dst} is a not a directory')

        if not os.path.exists(self.src):
            raise FileNotFoundError(f'file {self.src} does not exist')

        if not os.path.isdir(self.src):
            raise NotADirectoryError(f'{self.src} is not a directory')

        if os.path.isdir(self.dst) and os.path.samefile(self.src, self.dst):
            raise ValueError(f'{self.src} and {self.dst} are the same dir')

        # Avoid infinite recursion.
        if os.path.commonpath([self.src, self.dst]) == self.src:
            raise ValueError(f'{self.dst} is a subdirectory of {self.src}')

        if jobs <= 0:
            raise ValueError('jobs must be a positive value!')

        self.jobs = jobs
        self.dry = dry

        # Each key is a ffmpeg process, the value is a path of original FLAC.
        self.__tasks = {}

        print(f'Source directory: {self.src}')
        print(f'Destination directory: {self.dst}')
        print(f'Parallel jobs: {self.jobs}')
        print()

    def start(self):
        ''' Starts the conversion. First it removes old files and directory,
        then it copies all new files (.mp3, .ogg, .jpg and so on) to the
        destination directory. Only files ending with '.flac' are converted to
        '.ogg' with FFMPEG.

        To check if a file is outdated, the modification time is checked.

        If FFMPEG cannot be runned, FileNotFoundError is raised.

        If FFMPEG cannot convert a file, SubprocessError is raised.
        '''
        if os.path.isdir(self.dst):
            self.__filterOutdatedFiles(self.src, self.dst)

        with ThreadPoolExecutor(max_workers=self.jobs) as self.__pool:
            self.__syncFiles(self.src, self.dst)

            for task in as_completed(self.__tasks):
                src = self.__tasks[task]

                try:
                    result = task.result()

                    if result.returncode != 0:
                        raise SubprocessError(f'failed to convert {src}: ' +
                                              result.stderr.decode())

                    print(f'Converted {src}')
                except FileNotFoundError:
                    raise FileNotFoundError('cannot run ffmpeg executable')

    def __filterOutdatedFiles(self, src, dst):
        '''Removes all files and directory on 'dst' that are outdated or
        untracked. Modification time is checked to detect is a file is outdated.
        '''
        with os.scandir(dst) as directory:
            for file in directory:
                src_path = os.path.join(src, file.name)

                if file.is_file():
                    self.__processOutdatedFile(src_path, file.path)
                elif file.is_dir():
                    if os.path.isdir(src_path):
                        self.__filterOutdatedFiles(src_path, file.path)
                    else:
                        if not self.dry:
                            rmtree(file.path, ignore_errors=True)
                        print(f'Deleted untracked directory {file.path}')
                else:
                    print(f'File {file.path} is ignored!')

        # listdir is faster than scandir if you don't want file attributes.
        # If 'dst' is empty but 'src' exists, do not delete it.
        if len(os.listdir(dst)) == 0 and not os.path.isdir(src):
            if not self.dry:
                os.rmdir(dst)
            print(f'Deleted empty directory {dst}')

    def __syncFiles(self, src, dst):
        '''It syncs file from 'src' to 'dst'. Only files that are not present in
        'dst' are copied/converted.
        '''
        try: # Better than 'os.makedirs' because I can check what happens.
            if not self.dry:
                os.mkdir(dst)
            print(f'Created directory {dst}')
        except FileExistsError:
            pass

        with os.scandir(src) as directory:
            for file in directory:
                dst_path = os.path.join(dst, file.name)

                if file.is_file():
                    self.__processFile(file.path, dst_path)
                elif file.is_dir():
                    self.__syncFiles(file.path, dst_path)
                else:
                    print(f'File {file.path} is ignored!')

    def __processFile(self, src, dst):
        '''It copies 'src' to 'dst'. If 'src' path ends with '.flac', is
        converted to '.ogg' using FFMPEG. The conversion is asynchronous, the
        FFMPEG process is added to 'self.__tasks' dictionary to check at the end
        if the conversion was successfully done.

        If 'src' cannot be copied to 'dst', RuntimeError is raised.
        '''
        if src.endswith('.flac'):
            dst = dst.replace('.flac', '.ogg') # Convert to OGG.

        if os.path.isfile(dst): # Process 'src' only if 'dst' is missing!
            return

        if src.endswith('.flac'):
            # FFMPEG options:
            # -hide_banner - Supress printing banner;
            # -loglevel error - Show only errors.
            # -vn - Disable video recording;
            # -aq 5 - Set audio quality.
            if self.dry:
                args = {'args': ['echo'], 'capture_output': True}
            else:
                args = {'args': ['ffmpeg', '-hide_banner', '-loglevel',
                                 'error', '-i', src, '-vn', '-aq', '5', dst],
                        'capture_output': True}
            self.__tasks[self.__pool.submit(run, **args)] = src
        else:
            try:
                if not self.dry:
                    copy(src, dst)
                print(f'Copied {src}')
            except OSError as error:
                raise RuntimeError(f'cannot copy {src} to {dst}: {error}')

    def __processOutdatedFile(self, src, dst):
        '''Removes 'dst' file if it is outdated, checking its modification time
        attribute with 'src'.
        '''
        def tryRemoveFile():
            if os.stat(src).st_mtime > os.stat(dst).st_mtime:
                if not self.dry:
                    os.remove(dst)
                print(f'Deleted old file {dst}')

        if os.path.isfile(src):
            tryRemoveFile()
        elif dst.endswith('.ogg'):
            # It is necessary because maybe the dst file has been converted from
            # the original FLAC file.
            src = src.replace('.ogg', '.flac')

            if os.path.isfile(src):
                tryRemoveFile()
        else:
            if not self.dry:
                os.remove(dst)
            print(f'Deleted untracked file {dst}')


if __name__ == '__main__':
    description = '''It syncs a music folder tree to a destination. All FLAC
    files are converted to OGG files calling 'ffmpeg'. Untracked or outdated
    files on destination are removed. It is useful to sync a music library on a
    device with limited space.'''

    epilog = 'It requires \'ffmpeg\' to convert FLAC files.'

    parser = ArgumentParser(description=description, epilog=epilog)

    parser.add_argument('-s', '--source', default=os.getcwd(),
                        help='Source directory (default is current)',
                        metavar='src')
    parser.add_argument('-j', '--jobs', default=os.cpu_count(), type=int,
                        help='Number of parallel FFMPEG jobs (default is you '
                             'number of CPUs)',
                        metavar='n')
    parser.add_argument('destination', help='Destination directory')
    parser.add_argument('-d', '--dry-run', action='store_true', dest='dry',
                        help='Print only the effects, do not sync')

    args = parser.parse_args(argv[1:]) # argv[0] is the program name.

    try:
        app = MusicConvert(args.source, args.destination, args.jobs, args.dry)

        app.start()
    except (FileNotFoundError, ValueError, NotADirectoryError,
            SubprocessError, RuntimeError) as error:
        parser.error(error)
