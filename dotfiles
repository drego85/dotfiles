#!/usr/bin/env bash
#
# This script manages my dotfiles. Run `dotfiles help' to get more informations.
#
# Copyright (c) 2018-2019 Emanuele Petriglia <inbox@emanuelepetriglia.com>
# All rights reserved. This file is licensed under the MIT license.

# This file id divided into several sections:
#   - List of global variables;
#   - List of common used functions;
#   - List of various modules (a script that does something);
#   - List of commands;
#   - Script's entry point.

# Global variables {{{

# Useful to display a prefix on logging messages.
CURRENT_MODULE=""

# Full path of dotfiles repository.
readonly REPO_PATH="$(dirname "$(readlink -f "$0")")"

# Full path of user's home dir.
readonly HOME_PATH="$(xdg-user-dir)"

# Program's name.
readonly PROGRAM="${0##*/}"

# User given command.
readonly COMMAND="$1"

# Target distribution of this script.
readonly VERSION="Fedora 30"

# Associative array of available modules (module name -> module description).
declare -A MODULES

# }}}

# Common used functions {{{

# Logging {{{{

# Prints a message to the standard output. If 'CURRENT_MODULE' is not empty, it
# uses the value as prefix.
#
# Parameter:
#     $1 -> the message to print to the standard output.
#
# Example:
#     $ CURRENT_MODULE="test" ed_log "Some application downloaded!"
#     test: Some application downloaded!
#
ed_log() {
  if [[ "$CURRENT_MODULE" ]]; then
    echo -n "$CURRENT_MODULE: "
  fi

  echo "$1"
}

# Prints a message to the standard error. If 'CURRENT_MODULE' is not empty, it
# uses the value as prefix.
#
# Parameter:
#     $1 -> the message to print to the standard error.
#
# Example:
#     $ CURRENT_MODULE="test" ed_wlog "Skipping some tasks!"
#     test: Skipping some tasks!
#
ed_wlog() {
  ed_log "$1" >&2
}

# It prints a message to the standard error and exits with an error code. If
# 'CURRENT_MODULE' is not empty, it uses the value as prefix.
#
# Parameters:
#     $1 -> the message to print to the standard error;
#     $2 -> the error code, default is 1.
#
# Example:
#     $ CURRENT_MODULE="test" ed_elog "X not found!" 5
#     test: X not found
#     $ echo $?
#     5
#
ed_elog() {
  ed_wlog "$1"
  exit "${2:-1}" # If $2 is unset or empty, set 'code' to 1.
}

# }}}}

# Binary commonds {{{{

# Check if a given program (the command) exists. If it doesn't
# exist, it prints an error message and exits.
#
# Parameters:
#     $1 -> the command to check.
#
# Example:
#     ed_exists "curl"
ed_exists() {
  local command_to_check="$1"

  if [[ -z "$command_to_check" ]]; then
     ed_elog "ed_exists: no given command to check."
  fi

  if [[ -z "$(command -v "$command_to_check")" ]]; then
    ed_elog "Error: $command_to_check is not installed on the system."
  fi
}

# }}}}

# Filesystem commons {{{{

# Check if a given directory exists, if it doesn't exist it will create
# the path with the directory.
#
# At the end of this function the path is certainly created.
#
# Parameters:
#     $1 -> directory to check and create;
#     $2 -> if "sudo" it creates the directory with root permissions.
ed_make_dir() {
  if [[ -z "$1" ]]; then
    ed_elog "ed_make_dir: no given directory to create."
  else
    local directory="$1"
  fi

  if [[ "$2" == "sudo" ]]; then
    local sudo="sudo"
  fi

  # $directory may exist but it is not necessary a directory.
  if [[ -e "$directory" ]]; then
    if [[ ! -d "$directory" ]]; then
      ed_elog "Error: ed_make_dir: \"$directory\" already exists and it is not a directory"
    fi
  else
    if [[ "$sudo" ]]; then
      ed_wlog "root required to create directory \"$directory\""
    fi

    $sudo mkdir --parents --verbose "$directory"
  fi
}

# It creates a simlink of a directory or file.
#
# Parameters:
#     $1 -> source path (a file or a directory);
#     $2 -> destination path;
#     $3 -> if 'sudo' it creates a symlink using root permissions.
#
# Example:
#     ed_make_symlink path/to/source path/to/dst
ed_make_symlink() {
  local src="$1"
  local dst="$2"

  if [[ "$3" == "sudo" ]]; then
    local sudo="sudo"
  fi

  if [[ -z "$src" ]]; then
    ed_elog "Error: source path is empty"
  fi

  if [[ -z "$dst" ]]; then
    ed_elog "Error: destination path is empty"
  fi

  if [[ -L "$dst" ]]; then
    local real_dst_path
    real_dst_path="$(readlink -f "$dst")"

    if [[ "$real_dst_path" != "$src" ]]; then
      ed_elog "Error: $dst is a symlink to $real_dst_path, not to $src"
    else
      ed_log "$dst is already a symlink to $src"
    fi
  else
    if [[ "$sudo" ]]; then
      ed_wlog "root required to create symlink \"$src\" -> \"$dst\""
    fi

    $sudo ln --symbolic --force --verbose "$src" "$dst"
  fi
}

# It creates a backup of a given file, appeding '.bak' suffix.
#
# Parameters:
#     $1 -> file path to copy;
#     $2 -> if 'sudo' it creates the backup using root permissions.
#
# Example:
#     $ ed_make_symlink file/path
#     Backup created: file/path.bak
ed_make_backup() {
  local src dst sudo

  [[ "$1" ]] || ed_elog "error: file path is empty"

  src="$1"
  dst="$1.bak"

  sudo=""
  [[ "$2" == "sudo" ]] && sudo="$2"

  [[ -e "$dst" ]] && ed_wlog "$dst backup file already exist, overwriting it..."

  [[ "$sudo" ]] && ed_wlog "root required to create symlink backup file '$dst'."

  $sudo cp --force "$src" "$dst" 2>/dev/null

  if [[ "$?" == "0" ]] ; then
    ed_log "created backup file '$dst' from '$src'."
  else
    ed_elog "failed to create backup file '$dst' from '$src'."
  fi
}

# }}}}

# DNF commons {{{{

# It installs a package via DNF. Warning: if you want to install packages from
# RPM Fusion repository, use 'ed_install_fusion'.
#
# Parameters:
#     $1 -> package's name
#
# Example:
#     ed_install "git"
ed_install() {
  local package="$1"

  # Check if package is already installed.
  output="$(dnf list --installed "$package")"
  installed=$?

  if [[ $installed == "0" ]]; then
    ed_wlog "$package: $package is already installed!"
  else
    # Install the package.
    ed_wlog "$package: root requested to install $package"
    sudo dnf install "$package"
  fi
}

# It removes a package via DNF.
#
# Parameters:
#     $1 -> package's name
#
# Example:
#     ed_remove "git"
ed_remove() {
  local package="$1"

  # Check if package is already removed.
  output="$(dnf list --installed "$package")"
  installed=$?

  if [[ $installed == "0" ]]; then
    # Remove the package.
    ed_wlog "root requested to remove $package"
    sudo dnf remove "$package"
  else
    ed_wlog "$package is already removed!"
  fi
}

# It installs a package via DNF from RPM Fusion repository. Use this function
# because it installs RPM Fusion repository if necessary.
#
# Parameters:
#     $1 -> package's name
#
# Example:
#     ed_install_fusion "vlc"
ed_install_fusion() {
  local package="$1"
  local repository
  repository="https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm"

  # Install RPM Fusion (free) repository.
  if [[ "$(find /etc/yum.repos.d/ -name rpmfusion-free.repo)" ]]; then
    ed_wlog "$package: RPM Fusion free repository is already added!"
  else
    ed_wlog "$package: root requested to install RPM Fusion free repository"
    sudo dnf install "$repository"
  fi

  ed_install "$package"
}

# }}}}

# }}}

# Modules {{{

MODULES["pass"]="install 'pass' package"
ed_module_pass() {
  ed_install "pass"
}

MODULES["telegram"]="install 'telegram-desktop' package"
ed_module_telegram() {
  ed_install_fusion "telegram-desktop"
}

MODULES["thunderbird"]="install 'thunderbird' package"
ed_module_thunderbird() {
  ed_install "thunderbird"
}

MODULES["vlc"]="install 'vlc' package"
ed_module_vlc() {
  ed_install_fusion "vlc"
}

MODULES["youtube-dl"]="install 'youtube-dl' package"
ed_module_youtube-dl() {
  ed_log "Installing module $CURRENT_MODULE"

  ed_install "youtube-dl"
}

MODULES["gtk"]="enable Arc-Dark GTK+ theme"
ed_module_gtk() {
  # It is installed by default on Fedora.
  # ed_install "arc-theme"

  # Activate the theme.
  local current
  current="$(xfconf-query --channel xsettings --property /Net/ThemeName)"
  if [[ "$current" == "Arc-Dark" ]]; then
      ed_wlog "Arc-Dark theme is already activated!"
    else
      xfconf-query --channel xsettings --property /Net/ThemeName --set Arc-Dark
  fi
}

MODULES["icon"]="install 'papirus-icon-theme' package and enable it"
ed_module_icon() {
  ed_install "papirus-icon-theme"

  # Activate the icon theme.
  local current
  current="$(xfconf-query --channel xsettings --property /Net/IconThemeName)"
  if [[ "$current" == "Papirus-Dark" ]]; then
      ed_wlog "Papirus-Dark icon theme is already activated!"
    else
      xfconf-query --channel xsettings --property /Net/IconThemeName --set Papirus-Dark
  fi
}

MODULES["bin"]="create symlinks for custom scripts on ~/.local/bin"
ed_module_bin() {
  local bin_path
  bin_path="$HOME_PATH/.local/bin"

  mkdir --parents --verbose "$bin_path" || ed_elog "Failed to create '$bin_path'"

  for script in "$REPO_PATH"/bin/* ; do
    if [[ -x "$script" ]] ; then # Avoid symlink the README.md file.
      ed_make_symlink "$script" "$bin_path/$(basename "$script")"
    fi
  done
}

MODULES["git"]="install 'git' and link the configuration"
ed_module_git() {
  local dest_path
  dest_path="$HOME_PATH"

  ed_install "git"

  mkdir --parents --verbose "$dest_path" || ed_elog "Failed to create '$dest_path'"

  for config in "$REPO_PATH"/git/* ; do
    # Because git config are dotfiles, they starts with '.'.
    ed_make_symlink "$config" "$dest_path/.$(basename "$config")"
  done
}

MODULES["tlp"]="install 'tlp', link the configuration and enable it"
ed_module_tlp() {
  local src dst check_path

  ed_install "tlp"

  # Create symlink (with backup).
  src="$REPO_PATH/tlp/tlp"
  dst="/etc/default/tlp"

  if [[ "$(readlink -f "$dst")" != "$src" ]] ; then
    ed_make_backup "$dst" "sudo"
    ed_make_symlink "$src" "$dst" "sudo"
  else
    ed_wlog "'$dst' is already a symlink to '$src'."
  fi

  # Enable tlp
  ed_wlog "root requested to start tlp!"
  sudo tlp start &>>/dev/null || ed_elog "tlp: Failed to start tlp!"
  ed_log "tlp started successfuly!"
}

MODULES["dotfiles"]="install itself to '~/.local/bin'"
ed_module_dotfiles() {
  ed_make_symlink "$REPO_PATH/$PROGRAM" "$HOME_PATH/.local/bin/$PROGRAM"
}

MODULES["clean"]="remove various packages that I don't use"
ed_module_clean() {
  ed_remove "gnome-keyring"
  ed_remove "seahorse"
  ed_remove "xfdashboard"
  ed_remove "claws-mail"
  ed_remove "xscreensaver-base"
  ed_remove "xfburn"
  ed_remove "geany"
  ed_remove "pidgin"
  ed_remove "asunder"
  ed_remove "pragha"
  ed_remove "parole"
  ed_remove "dnfdragora"
  ed_remove "abiword"
  ed_remove "gnumeric"
  ed_remove "xfce4-dict"
  ed_remove "orage"
  ed_remove "xfce4-clipman-plugin"
  ed_remove "firewall-config"
}

MODULES["gpg"]="install GnuPG configuration and enable it via systemd --user"
ed_module_gpg() {
  local file dest_unit src_unit

  # 1. Install my favourite pinentry.
  ed_install "pinetry-gtk"

  # 2. Create symlinks for configuration.
  for file in "gpg.conf" "gpg-agent.conf" "sshcontrol" ; do
    ed_make_symlink "$REPO_PATH/gnupg/$file" "$HOME_PATH/.gnupg/$file"
  done

  dest_unit="$HOME_PATH/.config/systemd/user"
  src_unit="/usr/share/doc/gnupg2/examples/systemd-user"

  # 3. Create symlinks for systemd unit files.
  ed_make_dir "$dest_unit"
  for unit in "$src_unit"/*.{service,socket} ; do
    ed_make_symlink "$unit" "$dest_unit/${unit##*/}"
  done

  # 4. Enable systemd unit files.
  systemctl --user daemon-reload

  systemctl --user enable $(basename --multiple "$src_unit"/*.socket)
  systemctl --user start $(basename --multiple "$src_unit"/*.socket)
}

MODULES["lightdm"]="link LightDM configuration"
ed_module_lightdm() {
  ed_make_symlink "$REPO_PATH/lightdm/lightdm.conf" \
                  "/usr/share/lightdm/lightdm.conf.d/70_start_xfce_session.conf"\
                  sudo
}

MODULES["vim"]="prepare vim folder and link it to $HOME_PATH/.vim"
ed_module_vim() {
  local plugins_path

  # TODO: fix
  ln -Tfs /home/emanuele/.dotfiles/vim /home/emanuele/.vim

  plugins_path="$REPO_PATH/vim/pack/start"

  # Update and download all plugins.
  git -C "$REPO_PATH" submodule update --init "$plugins_path/papercolor-theme"
  git -C "$REPO_PATH" submodule update --init "$plugins_path/vim-syntax-extra"
  git -C "$REPO_PATH" submodule update --init "$plugins_path/python-syntax"
  git -C "$REPO_PATH" submodule update --init "$plugins_path/goyo.vim"
  git -C "$REPO_PATH" submodule update --init "$plugins_path/vim-pencil"
}

MODULES["xfce4-terminal"]="link configuration"
ed_module_xfce4-terminal() {
  local dest_path

  dest_path="$HOME_PATH/.config/xfce4"

  # TODO: fix, same as vim module
  ln -Tfs "$REPO_PATH/xfce4-terminal" "$dest_path/terminal"
}

MODULES["xfwm4"]="install xfwm4 theme"
ed_module_xfwm4() {
  local dest_path

  git -C "$REPO_PATH" submodule update --init "xfwm4/thinble"

  dest_path="$HOME_PATH/.local/share/themes"
  ed_make_dir "$dest_path"

  ed_make_symlink "$REPO_PATH/xfwm4/thinble" "$dest_path/thinble"
}

# }}}

# Command line interface {{{

# It prints to the standard output an help message with usage instructions.
ed_cmd_help() {
  cat <<-_EOF
Usage:
    $PROGRAM [ COMMAND ] [ ARGS ] ...

  This script manages my custom dotfiles. My dotfiles are organized as
  "modules". A module is simply a Bash script, it can install packages (via DNF)
  or create symlinks for the configuration.

Commands:
    list
        List all available modules.
    install <module>...
        Install the given modules.
    help
        Show this text.
    version
        Show version information.

Example:

    The following command install the "telegram" module:
    $ $PROGRAM install telegram

Files:

    $REPO_PATH
        Dotfiles repository.

_EOF
}

# It prints to the standard output the version of this script.
ed_cmd_version() {
  echo "$PROGRAM script for $VERSION"
}

# It prints to the standard output a list of available modules.
ed_cmd_list() {
  ed_log "${#MODULES[*]} available modules:"

  # Formatting like this: module name     - module description
  for module in ${!MODULES[*]} ; do
    printf "%-13s - %s\n" "$module" "${MODULES["$module"]}"
  done
}

# It installs all modules given as input.
ed_cmd_install() {
  local nr_modules counter
  [[ "$1" ]] || ed_elog "No modules given."

  # Check if exist given modules.
  for module in $@ ; do
    [[ "${MODULES["$module"]}" ]] || ed_elog "Module '$module' doesn't exist."
  done

  nr_modules="$#"
  ed_log "Installing $nr_modules modules..."

  while [[ "$1" ]]; do
    # Note that '$#' change every iteration, because of 'shift'. It is a counter
    # like this: (4/7) Installing module foo...
    ed_log "($(($nr_modules - $# + 1))/$nr_modules) Installing module $1..."

    # The module name is also the suffix of the function.
    CURRENT_MODULE="$1" ed_module_$1

    shift
  done
}

# }}}

# Entry point {{{

case "$COMMAND" in
  list) shift;              ed_cmd_list "$@" ;;
  install) shift;           ed_cmd_install "$@" ;;
  help|-h|--help) shift;    ed_cmd_help "$@" ;;
  version|--version) shift; ed_cmd_version "$@" ;;
  *) shift;                 ed_cmd_help "$@" ;;
esac

exit 0

# }}}

# vim:foldmethod=marker
