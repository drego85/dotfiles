#!/usr/bin/env bash
#
# This script manages my dotfiles. Run `dotfiles help' to get more informations.
#
# Copyright (c) 2018-2019 Emanuele Petriglia <inbox@emanuelepetriglia.com>
# All rights reserved. This file is licensed under the MIT license.

# This file id divided into several sections:
#   - List of global variables;
#   - List of common used functions;
#   - List of various modules (a script that does something);
#   - List of commands;
#   - Script's entry point.

# Global variables {{{

# Useful to display a prefix on logging messages.
CURRENT_MODULE=""

# Full path of dotfiles repository.
readonly REPO_PATH="$(dirname "$(readlink -f "$0")")"

# Full path of user's home dir.
readonly HOME_PATH="$(xdg-user-dir)"

# Program's name.
readonly PROGRAM="${0##*/}"

# User given command.
readonly COMMAND="$1"

# Target of this script.
readonly TARGET_DISTRIBUTION="Fedora"
readonly TARGET_VERSION=30

# Associative array of available modules (module name -> module description).
declare -A MODULES

# Default exit codes.
readonly EXIT_SUCCESS=0
readonly EXIT_FAILURE=1

# }}}

# Common used functions {{{

# Logging {{{{

# Prints a message to the standard output. If 'CURRENT_MODULE' is not empty, it
# uses the value as prefix.
#
# Parameter:
#     $1 -> the message to print to the standard output.
#
# Example:
#     $ CURRENT_MODULE="test" ed_log "Some application downloaded!"
#     test: Some application downloaded!
#
ed_log() {
  if [[ "$CURRENT_MODULE" ]]; then
    echo -n "$CURRENT_MODULE: "
  fi

  echo "$1"
}

# Prints a message to the standard error. If 'CURRENT_MODULE' is not empty, it
# uses the value as prefix.
#
# Parameter:
#     $1 -> the message to print to the standard error.
#
# Example:
#     $ CURRENT_MODULE="test" ed_wlog "Skipping some tasks!"
#     test: Skipping some tasks!
#
ed_wlog() {
  ed_log "$1" >&2
}

# It prints a message to the standard error and exits with an error code. If
# 'CURRENT_MODULE' is not empty, it uses the value as prefix.
#
# Parameters:
#     $1 -> the message to print to the standard error;
#     $2 -> the error code, default is $EXIT_FAILURE (optional);
#     $3 -> an optional function or command to run before exit (optional).
#
# Example:
#     $ CURRENT_MODULE="test" ed_elog "X not found!" 5
#     test: X not found
#     $ echo $?
#     5
#     $ ed_elog "failed to do..." 1 "echo ciao"
#     failed to do...
#     ciao
#
ed_elog() {
  ed_wlog "$1"

  [[ "$3" ]] && "$3" # Run a command before exiting, if exists.

  exit "${2:-$EXIT_FAILURE}" # If $2 is unset or empty, set to default.
}

# }}}}

# Filesystem commons {{{{

# Check if a given directory exists, if it doesn't exist it will create
# the path with the directory.
#
# At the end of this function the path is certainly created.
#
# Parameters:
#     $1 -> directory to check and create;
#     $2 -> if "sudo" it creates the directory with root permissions.
ed_make_dir() {
  if [[ -z "$1" ]]; then
    ed_elog "ed_make_dir: no given directory to create."
  else
    local directory="$1"
  fi

  if [[ "$2" == "sudo" ]]; then
    local sudo="sudo"
  fi

  # $directory may exist but it is not necessary a directory.
  if [[ -e "$directory" ]]; then
    if [[ ! -d "$directory" ]]; then
      ed_elog "Error: ed_make_dir: \"$directory\" already exists and it is not a directory"
    fi
  else
    if [[ "$sudo" ]]; then
      ed_wlog "root required to create directory \"$directory\""
    fi

    $sudo mkdir --parents --verbose "$directory"
  fi
}

# It creates a simlink of a directory or file.
#
# Parameters:
#     $1 -> source path (a file or a directory);
#     $2 -> destination path;
#     $3 -> if 'sudo' it creates a symlink using root permissions.
#
# Example:
#     ed_make_symlink path/to/source path/to/dst
ed_make_symlink() {
  local src="$1"
  local dst="$2"

  if [[ "$3" == "sudo" ]]; then
    local sudo="sudo"
  fi

  if [[ -z "$src" ]]; then
    ed_elog "Error: source path is empty"
  fi

  if [[ -z "$dst" ]]; then
    ed_elog "Error: destination path is empty"
  fi

  if [[ -L "$dst" ]]; then
    local real_dst_path
    real_dst_path="$(readlink -f "$dst")"

    if [[ "$real_dst_path" != "$src" ]]; then
      ed_elog "Error: $dst is a symlink to $real_dst_path, not to $src"
    else
      ed_log "$dst is already a symlink to $src"
    fi
  else
    if [[ "$sudo" ]]; then
      ed_wlog "root required to create symlink \"$src\" -> \"$dst\""
    fi

    $sudo ln --symbolic --force --verbose "$src" "$dst"
  fi
}

# It creates a backup of a given file, appeding '.bak' suffix.
#
# Parameters:
#     $1 -> file path to copy;
#     $2 -> if 'sudo' it creates the backup using root permissions.
#
# Example:
#     $ ed_make_symlink file/path
#     Backup created: file/path.bak
ed_make_backup() {
  local src dst sudo

  [[ "$1" ]] || ed_elog "error: file path is empty"

  src="$1"
  dst="$1.bak"

  sudo=""
  [[ "$2" == "sudo" ]] && sudo="$2"

  [[ -e "$dst" ]] && ed_wlog "$dst backup file already exist, overwriting it..."

  [[ "$sudo" ]] && ed_wlog "root required to create symlink backup file '$dst'."

  if $sudo cp --force "$src" "$dst" 2>/dev/null ; then
    ed_log "created backup file '$dst' from '$src'."
  else
    ed_elog "failed to create backup file '$dst' from '$src'."
  fi
}

# }}}}

# Web commons {{{{

# It is a wrapper to 'curl', to download files to some point. If there is a
# problem, it will don't exit, instead it returns 1 (0 is success).
#
# Parameters:
#   $1 -> file to download;
#   $2 -> path and name to save the downloaded file
#
# Example:
#   ed_download "http://example.com/" "$HOME/Downloads/example.com"
ed_download() {
  local src="$1"
  local dst="$2"

  # '--location' is needed to follow redirects.
  curl --location --silent --show-error "$src" --output "$dst" || return 1

  return 0
}

# }}}}

# }}}

# Modules {{{

MODULES["packages"]="install various packages"
ed_module_packages() {
  # Install RPM Fusion Free repository.
  local repository
  repository="https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm"

  # Install RPM Fusion (free) repository.
  if [[ -f "/etc/yum.repos.d/rpmfusion-free.repo" ]]; then
    ed_wlog "RPM Fusion free repository is already added!"
  else
    ed_wlog "root requested to install RPM Fusion free repository"
    sudo dnf install "$repository"
  fi


  ed_wlog "root requested to install packages!"
  sudo dnf install "pass" "thunderbird" "vlc" "youtube-dl" "telegram-desktop"
}

MODULES["gtk"]="enable Arc-Dark GTK+ theme"
ed_module_gtk() {
  # Activate the theme.
  local current
  current="$(xfconf-query --channel xsettings --property /Net/ThemeName)"
  if [[ "$current" == "Arc-Dark" ]]; then
      ed_wlog "Arc-Dark theme is already activated!"
    else
      xfconf-query --channel xsettings --property /Net/ThemeName --set Arc-Dark
  fi
}

MODULES["icon"]="install 'papirus-icon-theme' package and enable it"
ed_module_icon() {
  sudo dnf install "papirus-icon-theme"

  # Activate the icon theme.
  local current
  current="$(xfconf-query --channel xsettings --property /Net/IconThemeName)"
  if [[ "$current" == "Papirus-Dark" ]]; then
      ed_wlog "Papirus-Dark icon theme is already activated!"
    else
      xfconf-query --channel xsettings --property /Net/IconThemeName --set Papirus-Dark
  fi
}

MODULES["bin"]="create symlinks for custom scripts on ~/.local/bin"
ed_module_bin() {
  local bin_path="$HOME_PATH/.local/bin"

  ed_make_dir "$bin_path"

  for script in "$REPO_PATH"/bin/* ; do
    ed_make_symlink "$script" "$bin_path/${script##*/}"
  done
}

MODULES["git"]="install 'git' and link the configuration"
ed_module_git() {
  local dest_path="$HOME_PATH"

  sudo dnf install "git"

  ed_make_dir "$dest_path"

  for config in "$REPO_PATH"/git/* ; do
    # Because git config are dotfiles, they starts with '.'.
    ed_make_symlink "$config" "$dest_path/.${config##*/}"
  done
}

MODULES["tlp"]="install 'tlp', link the configuration and enable it"
ed_module_tlp() {
  local src dst

  sudo dnf install "tlp"

  # Create symlink (with backup).
  src="$REPO_PATH/tlp/tlp"
  dst="/etc/default/tlp"

  if [[ "$(readlink -f "$dst")" != "$src" ]] ; then
    ed_make_backup "$dst" "sudo"
    ed_make_symlink "$src" "$dst" "sudo"
  else
    ed_wlog "'$dst' is already a symlink to '$src'."
  fi

  # Before enabling tlp, you need to fix a SELinux policy.
  local policy="$REPO_PATH/tlp/fix-tlp"
  checkmodule --mls -m -o "$policy.mod" "$policy.te"
  semodule_package -o "$policy.pp" -m "$policy.mod"

  ed_wlog "root requested to install '$policy.te' policy!"
  sudo semodule --install "$policy.pp"
  ed_log "policy installed successfuly!"

  rm --force "$policy.pp" "$policy.mod"

  # Enable tlp
  ed_wlog "root requested to start tlp!"
  sudo tlp start &>>/dev/null || ed_elog "tlp: Failed to start tlp!"
  ed_log "tlp started successfuly!"
}

MODULES["dotfiles"]="install itself to '~/.local/bin'"
ed_module_dotfiles() {
  ed_make_symlink "$REPO_PATH/$PROGRAM" "$HOME_PATH/.local/bin/$PROGRAM"
}

MODULES["clean"]="remove various packages that I don't use"
ed_module_clean() {
  sudo dnf remove "gnome-keyring" "seahorse" "xfdashboard" "claws-mail" \
                  "xscreensaver-base" "xfburn" "geany" "pidgin" "asunder" \
                  "pragha" "parole" "dnfdragora" "abiword" "gnumeric" \
                  "xfce4-dict" "orage" "xfce4-clipman-plugin" "firewall-config"
}

MODULES["gpg"]="install GnuPG configuration and enable it via systemd --user"
ed_module_gpg() {
  # 1. Install my favourite pinentry.
  sudo dnf install "pinentry-gtk"

  # 2. Create symlinks for configuration.
  for file in "$REPO_PATH"/gnupg/* ; do
    ed_make_symlink "$file" "$HOME_PATH/.gnupg/${file##*/}"
  done

  local dest_unit="$HOME_PATH/.config/systemd/user"
  local src_unit="/usr/share/doc/gnupg2/examples/systemd-user"

  # 3. Create symlinks for systemd unit files.
  ed_make_dir "$dest_unit"
  for unit in "$src_unit"/*.{service,socket} ; do
    ed_make_symlink "$unit" "$dest_unit/${unit##*/}"
  done

  # 4. Enable systemd unit files.
  systemctl --user daemon-reload

  local socket
  for full_socket in "$src_unit"/*.socket ; do
    socket="${full_socket##*/}"

    systemctl --user enable "$socket"
    systemctl --user start "$socket"
  done
}

MODULES["lightdm"]="link LightDM configuration"
ed_module_lightdm() {
  ed_make_symlink "$REPO_PATH/lightdm/lightdm.conf" \
                  "/usr/share/lightdm/lightdm.conf.d/70_start_xfce_session.conf"\
                  sudo
}

MODULES["vim"]="prepare vim folder and link it to $HOME_PATH/.vim"
ed_module_vim() {
  local plugins_path

  # TODO: fix
  ln -Tfs /home/emanuele/.dotfiles/vim /home/emanuele/.vim

  plugins_path="$REPO_PATH/vim/pack/start"

  # Update and download all plugins.
  git -C "$REPO_PATH" submodule update --init "$plugins_path/papercolor-theme"
  git -C "$REPO_PATH" submodule update --init "$plugins_path/vim-syntax-extra"
  git -C "$REPO_PATH" submodule update --init "$plugins_path/python-syntax"
  git -C "$REPO_PATH" submodule update --init "$plugins_path/goyo.vim"
  git -C "$REPO_PATH" submodule update --init "$plugins_path/vim-pencil"
}

MODULES["xfce4"]="link configuration of various Xfce apps"
ed_module_xfce4() {
  local dest_path

  dest_path="$HOME_PATH/.config/xfce4"

  # xfce4-terminal configuration.
  # TODO: fix, same as vim module
  ln -Tfs "$REPO_PATH/xfce4/xfce4-terminal" "$dest_path/terminal"
}

MODULES["xfwm4"]="install xfwm4 theme"
ed_module_xfwm4() {
  local dest_path

  git -C "$REPO_PATH" submodule update --init "xfwm4/thinble"

  dest_path="$HOME_PATH/.local/share/themes"
  ed_make_dir "$dest_path"

  ed_make_symlink "$REPO_PATH/xfwm4/thinble" "$dest_path/thinble"
}

MODULES["bash"]="link Bash configuration"
ed_module_bash() {
  for file in "$REPO_PATH"/bash/* ; do
    ed_make_symlink "$file" "$HOME_PATH/.${file##*/}"
  done
}

MODULES["font"]="download and install Hack font (but don't activate it)"
ed_module_font() {
  local xz_file
  local tar_file
  local dest_path="$HOME_PATH/.local/share/fonts"
  local hack_version="v3.003"

  xz_file="$(mktemp --suffix=.tar.xz)"
  tar_file="${xz_file%%.xz}"

  local hack_dl_file="Hack-$hack_version-ttf.tar.xz"
  local hack_dl_url="https://github.com/source-foundry/Hack/releases/download/$hack_version/$hack_dl_file"

  # Download the font files.
  ed_download "$hack_dl_url" "$xz_file" ||
    ed_elog "Failed to download '$hack_dl_url'" "$EXIT_FAILURE" "rf --force $xz_file"

  # Extract the pack and install the fonts.
  xz --decompress "$xz_file" ||
    ed_elog "Failed to decompress '$xz_file'" "$EXIT_FAILURE" "rf --force $xz_file"

  ed_make_dir "$dest_path"

  tar --extract --file "$tar_file" --directory "$dest_path" ||
    ed_elog "Failed to extract '$tar_file'" "$EXIT_FAILURE" "rf --force $tar_file"

  rm --force "$tar_file" # Remove downloaded file.

  ed_log "clearing and rigenerating font cache, it may taking a while..."
  fc-cache --verbose --force "$dest_path"
}

MODULES["ruby"]="install ruby (with bundler) and default config"
ed_module_ruby() {
  # FIXME
  ed_log "Installing C development tools and libraries (for native rubygems)"
  sudo dnf group install "C Development Tools and Libraries"

  sudo dnf install "ruby"
  sudo dnf install "ruby-devel"

  # Necessary to build native gems.
  sudo dnf install "redhat-rpm-config"

  # Install bundler
  ed_log "Install bundler via rubygem"
  gem install --user-install --bindir /home/emanuele/bin bundler

  # Install 
  ed_log "Install bundler configuration"
  ed_make_dir "$HOME_PATH/.bundle"
  ed_make_symlink "$REPO_PATH/ruby/bundle_config" "$HOME_PATH/.bundle/config"
}

MODULES["firefox"]="install firefox and custom user.js to 'emanuele' profile"
ed_module_firefox() {
  sudo dnf install "firefox"

  local firefox_path="$HOME_PATH/.mozilla/firefox"

  # Find profile path.
  [[ -d "$firefox_path" ]] ||
    ed_elog "No '$firefox_path' folder found. Is Firefox installed?"

  local profile_path
  profile_path="$(find "$firefox_path" -maxdepth 1 -regex '.*\.default-release$')"

  [[ "$profile_path" ]] ||
    ed_elog "No profile with suffix 'default-release' found!"

  # Download and install custom user.js.
  local ghacks_js_url="https://raw.githubusercontent.com/ghacksuserjs/ghacks-user.js/master/user.js"
  local dest_user_js="$profile_path/user.js"
  local custom_user_js="$REPO_PATH/firefox/user.js"

  ed_download "$ghacks_js_url" "$dest_user_js" ||
    ed_elog "Failed to download '$ghacks_js_url'"

  cat "$custom_user_js" >> "$dest_user_js" # Note: append, don't overwrite!
}

# }}}

# Command line interface {{{

# It prints to the standard output an help message with usage instructions.
ed_cmd_help() {
  cat <<-_EOF
Usage:
    $PROGRAM [ COMMAND ] [ ARGS ] ...

  This script manages my custom dotfiles. My dotfiles are organized as
  "modules". A module is simply a Bash script, it can install packages (via DNF)
  or create symlinks for the configuration.

Commands:
    list
        List all available modules.

    install <module>...
        Install the given modules. If the first given module is 'all', it
        installs all modules.

    help
        Show this text.

    version
        Show version information.

Example:

    The following command install the "telegram" module:
    $ $PROGRAM install telegram

Files:

    $REPO_PATH
        Dotfiles repository.

_EOF
}

# It prints to the standard output a list of available modules.
ed_cmd_list() {
  local sorted_modules

  ed_log "${#MODULES[*]} available modules:"

  # Formatting like this: module name     - module description
  sorted_modules="$(echo "${!MODULES[*]}" | tr " " "\n" | sort | tr "\n" " ")"
  for module in $sorted_modules ; do
    printf "%-13s - %s\n" "$module" "${MODULES["$module"]}"
  done
}

# It installs all modules given as input.
ed_cmd_install() {
  local nr_modules
  [[ "$1" ]] || ed_elog "No modules given."

  # 'all' is a special module, it installs all modules.
  if [[ "$1" == "all" ]]; then
    set -- "${!MODULES[@]}"
  fi

  # Check if exist given modules.
  for module in "$@" ; do
    [[ "${MODULES["$module"]}" ]] || ed_elog "Module '$module' doesn't exist."
  done

  nr_modules="$#"
  ed_log "Installing $nr_modules modules..."

  while [[ "$1" ]]; do
    # Note that '$#' change every iteration, because of 'shift'. It is a counter
    # like this: (4/7) Installing module foo...
    ed_log "($((nr_modules - $# + 1))/$nr_modules) Installing module $1..."

    # The module name is also the suffix of the function.
    CURRENT_MODULE="$1" ed_module_"$1"

    shift
  done
}

# }}}

# Entry point {{{

# Check operating system name and version.
if [[ -e "/etc/os-release" ]]; then
  source "/etc/os-release"
elif [[ -e "/etc/usr/lib/os-release" ]]; then
  source "/etc/usr/lib/os-release"
else
  ed_elog "Failed to establish the current operating system name and version"
fi

if [[ "$NAME" != "$TARGET_DISTRIBUTION" || "$VERSION_ID" != "$TARGET_VERSION" ]]; then
  ed_wlog "Host OS is $NAME $VERSION_ID but this script is written for $TARGET_DISTRIBUTION $TARGET_VERSION. It might not work!"
fi

case "$COMMAND" in
  list) shift;              ed_cmd_list "$@" ;;
  install) shift;           ed_cmd_install "$@" ;;
  help|-h|--help) shift;    ed_cmd_help "$@" ;;
  version|--version) shift; echo "$PROGRAM script for $VERSION" ;;
  *) shift;                 ed_cmd_help "$@" ;;
esac

exit 0

# }}}

# vim:foldmethod=marker
